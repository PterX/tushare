package main

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + ".struct.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-struct. DO NOT EDIT.")
	g.P() // 换行
	// 输出 package packageName
	g.P("package ", file.GoPackageName)
	g.P() // 换行

	for _, m := range file.Messages {
		// 输出 message comment
		leadingComment := strings.TrimSuffix(m.Comments.Leading.String(), "\n")
		g.P(leadingComment)
		// 输出 type m.GoIdent struct {
		g.P("type ", m.GoIdent, " struct {")
		for _, field := range m.Fields {
			trailingComment := strings.TrimSuffix(field.Comments.Trailing.String(), "\n")
			kind := field.Desc.Kind().String()

			// float类型
			if field.Desc.Kind() == protoreflect.FloatKind {
				kind = kind + "32"
			}

			line := fmt.Sprintf("%s %s `json:\"%s\"` %s", field.GoName, kind, field.Desc.JSONName(), trailingComment)

			// message 类型
			if field.Desc.IsList() && field.Desc.Kind() == protoreflect.MessageKind {
				line = fmt.Sprintf("%s []* %s `json:\"%s\"` %s", field.GoName, field.Desc.Message().Name(), field.Desc.JSONName(), trailingComment)
			}

			// 输出 行内容
			g.P(line)
		}
		// 输出 }
		g.P("}")
	}
	g.P() // 换行
}
