// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.32.0
// 	protoc        (unknown)
// source: api/v1/stock.proto

package v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// 股票列表
type StockBasic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TsCode     string `protobuf:"bytes,1,opt,name=ts_code,proto3" json:"ts_code,omitempty"`            // TS代码
	Symbol     string `protobuf:"bytes,2,opt,name=symbol,proto3" json:"symbol,omitempty"`              // 股票代码
	Name       string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                  // 股票名称
	Area       string `protobuf:"bytes,4,opt,name=area,proto3" json:"area,omitempty"`                  // 地域
	Industry   string `protobuf:"bytes,5,opt,name=industry,proto3" json:"industry,omitempty"`          // 所属行业
	Fullname   string `protobuf:"bytes,6,opt,name=fullname,proto3" json:"fullname,omitempty"`          // 股票全称
	Enname     string `protobuf:"bytes,7,opt,name=enname,proto3" json:"enname,omitempty"`              // 英文全称
	Cnspell    string `protobuf:"bytes,8,opt,name=cnspell,proto3" json:"cnspell,omitempty"`            // 拼音缩写
	Market     string `protobuf:"bytes,9,opt,name=market,proto3" json:"market,omitempty"`              // 市场类型（主板/创业板/科创板/CDR）
	Exchange   string `protobuf:"bytes,10,opt,name=exchange,proto3" json:"exchange,omitempty"`         // 交易所代码
	CurrType   string `protobuf:"bytes,11,opt,name=curr_type,proto3" json:"curr_type,omitempty"`       // 交易货币
	ListStatus string `protobuf:"bytes,12,opt,name=list_status,proto3" json:"list_status,omitempty"`   // 上市状态 L上市 D退市 P暂停上市
	ListDate   string `protobuf:"bytes,13,opt,name=list_date,proto3" json:"list_date,omitempty"`       // 上市日期
	DelistDate string `protobuf:"bytes,14,opt,name=delist_date,proto3" json:"delist_date,omitempty"`   // 退市日期
	IsHs       string `protobuf:"bytes,15,opt,name=is_hs,proto3" json:"is_hs,omitempty"`               // 是否沪深港通标的，N否 H沪股通 S深股通
	ActName    string `protobuf:"bytes,16,opt,name=act_name,proto3" json:"act_name,omitempty"`         // 实控人名称
	ActEntType string `protobuf:"bytes,17,opt,name=act_ent_type,proto3" json:"act_ent_type,omitempty"` // 实控人企业性质
}

func (x *StockBasic) Reset() {
	*x = StockBasic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockBasic) ProtoMessage() {}

func (x *StockBasic) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockBasic.ProtoReflect.Descriptor instead.
func (*StockBasic) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{0}
}

func (x *StockBasic) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *StockBasic) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *StockBasic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StockBasic) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *StockBasic) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

func (x *StockBasic) GetFullname() string {
	if x != nil {
		return x.Fullname
	}
	return ""
}

func (x *StockBasic) GetEnname() string {
	if x != nil {
		return x.Enname
	}
	return ""
}

func (x *StockBasic) GetCnspell() string {
	if x != nil {
		return x.Cnspell
	}
	return ""
}

func (x *StockBasic) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *StockBasic) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *StockBasic) GetCurrType() string {
	if x != nil {
		return x.CurrType
	}
	return ""
}

func (x *StockBasic) GetListStatus() string {
	if x != nil {
		return x.ListStatus
	}
	return ""
}

func (x *StockBasic) GetListDate() string {
	if x != nil {
		return x.ListDate
	}
	return ""
}

func (x *StockBasic) GetDelistDate() string {
	if x != nil {
		return x.DelistDate
	}
	return ""
}

func (x *StockBasic) GetIsHs() string {
	if x != nil {
		return x.IsHs
	}
	return ""
}

func (x *StockBasic) GetActName() string {
	if x != nil {
		return x.ActName
	}
	return ""
}

func (x *StockBasic) GetActEntType() string {
	if x != nil {
		return x.ActEntType
	}
	return ""
}

type StockBasicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields     []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	TsCode     string   `protobuf:"bytes,4,opt,name=ts_code,proto3" json:"ts_code,omitempty"`         //TS股票代码
	Name       string   `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`               //名称
	Market     string   `protobuf:"bytes,6,opt,name=market,proto3" json:"market,omitempty"`           //市场类别 （主板/创业板/科创板/CDR/北交所）
	ListStatus string   `protobuf:"bytes,7,opt,name=list_status,proto3" json:"list_status,omitempty"` //上市状态 L上市 D退市 P暂停上市，默认是L
	Exchange   string   `protobuf:"bytes,8,opt,name=exchange,proto3" json:"exchange,omitempty"`       //交易所 SSE上交所 SZSE深交所 BSE北交所
	IsHs       string   `protobuf:"bytes,9,opt,name=is_hs,proto3" json:"is_hs,omitempty"`             //是否沪深港通标的，N否 H沪股通 S深股通
}

func (x *StockBasicRequest) Reset() {
	*x = StockBasicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockBasicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockBasicRequest) ProtoMessage() {}

func (x *StockBasicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockBasicRequest.ProtoReflect.Descriptor instead.
func (*StockBasicRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{1}
}

func (x *StockBasicRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *StockBasicRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *StockBasicRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *StockBasicRequest) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *StockBasicRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StockBasicRequest) GetMarket() string {
	if x != nil {
		return x.Market
	}
	return ""
}

func (x *StockBasicRequest) GetListStatus() string {
	if x != nil {
		return x.ListStatus
	}
	return ""
}

func (x *StockBasicRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *StockBasicRequest) GetIsHs() string {
	if x != nil {
		return x.IsHs
	}
	return ""
}

type StockBasicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*StockBasic `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *StockBasicResponse) Reset() {
	*x = StockBasicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockBasicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockBasicResponse) ProtoMessage() {}

func (x *StockBasicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockBasicResponse.ProtoReflect.Descriptor instead.
func (*StockBasicResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{2}
}

func (x *StockBasicResponse) GetList() []*StockBasic {
	if x != nil {
		return x.List
	}
	return nil
}

// 交易日历
type TradeCal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Exchange     string `protobuf:"bytes,1,opt,name=exchange,proto3" json:"exchange,omitempty"`           // 交易所 SSE上交所 SZSE深交所
	CalDate      string `protobuf:"bytes,2,opt,name=cal_date,proto3" json:"cal_date,omitempty"`           // 日历日期
	IsOpen       int32  `protobuf:"varint,3,opt,name=is_open,proto3" json:"is_open,omitempty"`            // 是否交易 0休市 1交易
	PretradeDate string `protobuf:"bytes,4,opt,name=pretrade_date,proto3" json:"pretrade_date,omitempty"` // 上一个交易日
}

func (x *TradeCal) Reset() {
	*x = TradeCal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeCal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeCal) ProtoMessage() {}

func (x *TradeCal) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeCal.ProtoReflect.Descriptor instead.
func (*TradeCal) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{3}
}

func (x *TradeCal) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *TradeCal) GetCalDate() string {
	if x != nil {
		return x.CalDate
	}
	return ""
}

func (x *TradeCal) GetIsOpen() int32 {
	if x != nil {
		return x.IsOpen
	}
	return 0
}

func (x *TradeCal) GetPretradeDate() string {
	if x != nil {
		return x.PretradeDate
	}
	return ""
}

type TradeCalRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields    []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	Exchange  string   `protobuf:"bytes,4,opt,name=exchange,proto3" json:"exchange,omitempty"`     // 交易所 SSE上交所,SZSE深交所,CFFEX 中金所,SHFE 上期所,CZCE 郑商所,DCE 大商所,INE 上能源
	StartDate string   `protobuf:"bytes,5,opt,name=start_date,proto3" json:"start_date,omitempty"` // 开始日期 （格式：YYYYMMDD 下同）
	EndDate   string   `protobuf:"bytes,6,opt,name=end_date,proto3" json:"end_date,omitempty"`     // 结束日期
	IsOpen    string   `protobuf:"bytes,7,opt,name=is_open,proto3" json:"is_open,omitempty"`       // 是否交易 '0'休市 '1'交易
	CalDate   string   `protobuf:"bytes,8,opt,name=cal_date,proto3" json:"cal_date,omitempty"`     // 日历日期
}

func (x *TradeCalRequest) Reset() {
	*x = TradeCalRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeCalRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeCalRequest) ProtoMessage() {}

func (x *TradeCalRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeCalRequest.ProtoReflect.Descriptor instead.
func (*TradeCalRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{4}
}

func (x *TradeCalRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *TradeCalRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *TradeCalRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *TradeCalRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *TradeCalRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *TradeCalRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *TradeCalRequest) GetIsOpen() string {
	if x != nil {
		return x.IsOpen
	}
	return ""
}

func (x *TradeCalRequest) GetCalDate() string {
	if x != nil {
		return x.CalDate
	}
	return ""
}

type TradeCalResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*TradeCal `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *TradeCalResponse) Reset() {
	*x = TradeCalResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TradeCalResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeCalResponse) ProtoMessage() {}

func (x *TradeCalResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeCalResponse.ProtoReflect.Descriptor instead.
func (*TradeCalResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{5}
}

func (x *TradeCalResponse) GetList() []*TradeCal {
	if x != nil {
		return x.List
	}
	return nil
}

// 股票曾用名
type NameChange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TsCode       string `protobuf:"bytes,1,opt,name=ts_code,proto3" json:"ts_code,omitempty"`             // TS代码
	Name         string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                   // 证券名称
	StartDate    string `protobuf:"bytes,3,opt,name=start_date,proto3" json:"start_date,omitempty"`       // 开始日期
	EndDate      string `protobuf:"bytes,4,opt,name=end_date,proto3" json:"end_date,omitempty"`           // 结束日期
	AnnDate      string `protobuf:"bytes,5,opt,name=ann_date,proto3" json:"ann_date,omitempty"`           // 公告日期
	ChangeReason string `protobuf:"bytes,6,opt,name=change_reason,proto3" json:"change_reason,omitempty"` // 变更原因
}

func (x *NameChange) Reset() {
	*x = NameChange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameChange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameChange) ProtoMessage() {}

func (x *NameChange) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameChange.ProtoReflect.Descriptor instead.
func (*NameChange) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{6}
}

func (x *NameChange) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *NameChange) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NameChange) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *NameChange) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *NameChange) GetAnnDate() string {
	if x != nil {
		return x.AnnDate
	}
	return ""
}

func (x *NameChange) GetChangeReason() string {
	if x != nil {
		return x.ChangeReason
	}
	return ""
}

type NameChangeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields    []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	TsCode    string   `protobuf:"bytes,4,opt,name=ts_code,proto3" json:"ts_code,omitempty"`       // TS代码
	StartDate string   `protobuf:"bytes,5,opt,name=start_date,proto3" json:"start_date,omitempty"` // 公告开始日期
	EndDate   string   `protobuf:"bytes,6,opt,name=end_date,proto3" json:"end_date,omitempty"`     // 公告结束日期
}

func (x *NameChangeRequest) Reset() {
	*x = NameChangeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameChangeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameChangeRequest) ProtoMessage() {}

func (x *NameChangeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameChangeRequest.ProtoReflect.Descriptor instead.
func (*NameChangeRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{7}
}

func (x *NameChangeRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *NameChangeRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *NameChangeRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *NameChangeRequest) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *NameChangeRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *NameChangeRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type NameChangeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*NameChange `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *NameChangeResponse) Reset() {
	*x = NameChangeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameChangeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameChangeResponse) ProtoMessage() {}

func (x *NameChangeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameChangeResponse.ProtoReflect.Descriptor instead.
func (*NameChangeResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{8}
}

func (x *NameChangeResponse) GetList() []*NameChange {
	if x != nil {
		return x.List
	}
	return nil
}

// 沪深股通成份股
type HsConst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TsCode  string `protobuf:"bytes,1,opt,name=ts_code,proto3" json:"ts_code,omitempty"`   // TS代码
	HsType  string `protobuf:"bytes,2,opt,name=hs_type,proto3" json:"hs_type,omitempty"`   // 沪深港通类型SH沪SZ深
	InDate  string `protobuf:"bytes,3,opt,name=in_date,proto3" json:"in_date,omitempty"`   // 纳入日期
	OutDate string `protobuf:"bytes,4,opt,name=out_date,proto3" json:"out_date,omitempty"` // 剔除日期
	IsNew   string `protobuf:"bytes,5,opt,name=is_new,proto3" json:"is_new,omitempty"`     // 是否最新 1是 0否
}

func (x *HsConst) Reset() {
	*x = HsConst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HsConst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HsConst) ProtoMessage() {}

func (x *HsConst) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HsConst.ProtoReflect.Descriptor instead.
func (*HsConst) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{9}
}

func (x *HsConst) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *HsConst) GetHsType() string {
	if x != nil {
		return x.HsType
	}
	return ""
}

func (x *HsConst) GetInDate() string {
	if x != nil {
		return x.InDate
	}
	return ""
}

func (x *HsConst) GetOutDate() string {
	if x != nil {
		return x.OutDate
	}
	return ""
}

func (x *HsConst) GetIsNew() string {
	if x != nil {
		return x.IsNew
	}
	return ""
}

type HsConstRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit  string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	HsType string   `protobuf:"bytes,4,opt,name=hs_type,proto3" json:"hs_type,omitempty"` // 类型SH沪股通SZ深股通
	IsNew  string   `protobuf:"bytes,5,opt,name=is_new,proto3" json:"is_new,omitempty"`   // 是否最新 1 是 0 否 (默认1)
	TsCode string   `protobuf:"bytes,6,opt,name=ts_code,proto3" json:"ts_code,omitempty"` // TS代码
}

func (x *HsConstRequest) Reset() {
	*x = HsConstRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HsConstRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HsConstRequest) ProtoMessage() {}

func (x *HsConstRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HsConstRequest.ProtoReflect.Descriptor instead.
func (*HsConstRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{10}
}

func (x *HsConstRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *HsConstRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *HsConstRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *HsConstRequest) GetHsType() string {
	if x != nil {
		return x.HsType
	}
	return ""
}

func (x *HsConstRequest) GetIsNew() string {
	if x != nil {
		return x.IsNew
	}
	return ""
}

func (x *HsConstRequest) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

type HsConstResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*HsConst `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *HsConstResponse) Reset() {
	*x = HsConstResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HsConstResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HsConstResponse) ProtoMessage() {}

func (x *HsConstResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HsConstResponse.ProtoReflect.Descriptor instead.
func (*HsConstResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{11}
}

func (x *HsConstResponse) GetList() []*HsConst {
	if x != nil {
		return x.List
	}
	return nil
}

// 上市公司基本信息
type StockCompany struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TsCode        string  `protobuf:"bytes,1,opt,name=ts_code,proto3" json:"ts_code,omitempty"`                // 股票代码
	Exchange      string  `protobuf:"bytes,2,opt,name=exchange,proto3" json:"exchange,omitempty"`              // 交易所代码 ，SSE上交所 SZSE深交所
	Chairman      string  `protobuf:"bytes,3,opt,name=chairman,proto3" json:"chairman,omitempty"`              // 法人代表
	Manager       string  `protobuf:"bytes,4,opt,name=manager,proto3" json:"manager,omitempty"`                // 总经理
	Secretary     string  `protobuf:"bytes,5,opt,name=secretary,proto3" json:"secretary,omitempty"`            // 董秘
	RegCapital    float32 `protobuf:"fixed32,6,opt,name=reg_capital,proto3" json:"reg_capital,omitempty"`      // 注册资本(万元)
	SetupDate     string  `protobuf:"bytes,7,opt,name=setup_date,proto3" json:"setup_date,omitempty"`          // 注册日期
	Province      string  `protobuf:"bytes,8,opt,name=province,proto3" json:"province,omitempty"`              // 所在省份
	City          string  `protobuf:"bytes,9,opt,name=city,proto3" json:"city,omitempty"`                      // 所在城市
	Introduction  string  `protobuf:"bytes,10,opt,name=introduction,proto3" json:"introduction,omitempty"`     // 公司介绍
	Website       string  `protobuf:"bytes,11,opt,name=website,proto3" json:"website,omitempty"`               // 公司主页
	Email         string  `protobuf:"bytes,12,opt,name=email,proto3" json:"email,omitempty"`                   // 电子邮件
	Office        string  `protobuf:"bytes,13,opt,name=office,proto3" json:"office,omitempty"`                 // 办公室
	Employees     int64   `protobuf:"varint,14,opt,name=employees,proto3" json:"employees,omitempty"`          // 员工人数
	MainBusiness  string  `protobuf:"bytes,15,opt,name=main_business,proto3" json:"main_business,omitempty"`   // 主要业务及产品
	BusinessScope string  `protobuf:"bytes,16,opt,name=business_scope,proto3" json:"business_scope,omitempty"` // 经营范围
}

func (x *StockCompany) Reset() {
	*x = StockCompany{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockCompany) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockCompany) ProtoMessage() {}

func (x *StockCompany) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockCompany.ProtoReflect.Descriptor instead.
func (*StockCompany) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{12}
}

func (x *StockCompany) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *StockCompany) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *StockCompany) GetChairman() string {
	if x != nil {
		return x.Chairman
	}
	return ""
}

func (x *StockCompany) GetManager() string {
	if x != nil {
		return x.Manager
	}
	return ""
}

func (x *StockCompany) GetSecretary() string {
	if x != nil {
		return x.Secretary
	}
	return ""
}

func (x *StockCompany) GetRegCapital() float32 {
	if x != nil {
		return x.RegCapital
	}
	return 0
}

func (x *StockCompany) GetSetupDate() string {
	if x != nil {
		return x.SetupDate
	}
	return ""
}

func (x *StockCompany) GetProvince() string {
	if x != nil {
		return x.Province
	}
	return ""
}

func (x *StockCompany) GetCity() string {
	if x != nil {
		return x.City
	}
	return ""
}

func (x *StockCompany) GetIntroduction() string {
	if x != nil {
		return x.Introduction
	}
	return ""
}

func (x *StockCompany) GetWebsite() string {
	if x != nil {
		return x.Website
	}
	return ""
}

func (x *StockCompany) GetEmail() string {
	if x != nil {
		return x.Email
	}
	return ""
}

func (x *StockCompany) GetOffice() string {
	if x != nil {
		return x.Office
	}
	return ""
}

func (x *StockCompany) GetEmployees() int64 {
	if x != nil {
		return x.Employees
	}
	return 0
}

func (x *StockCompany) GetMainBusiness() string {
	if x != nil {
		return x.MainBusiness
	}
	return ""
}

func (x *StockCompany) GetBusinessScope() string {
	if x != nil {
		return x.BusinessScope
	}
	return ""
}

type StockCompanyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit    string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset   string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields   []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	TsCode   string   `protobuf:"bytes,4,opt,name=ts_code,proto3" json:"ts_code,omitempty"`   // 股票代码
	Exchange string   `protobuf:"bytes,5,opt,name=exchange,proto3" json:"exchange,omitempty"` // 交易所代码 ，SSE上交所 SZSE深交所 BSE北交所
	Status   string   `protobuf:"bytes,6,opt,name=status,proto3" json:"status,omitempty"`     // 状态
}

func (x *StockCompanyRequest) Reset() {
	*x = StockCompanyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockCompanyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockCompanyRequest) ProtoMessage() {}

func (x *StockCompanyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockCompanyRequest.ProtoReflect.Descriptor instead.
func (*StockCompanyRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{13}
}

func (x *StockCompanyRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *StockCompanyRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *StockCompanyRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *StockCompanyRequest) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *StockCompanyRequest) GetExchange() string {
	if x != nil {
		return x.Exchange
	}
	return ""
}

func (x *StockCompanyRequest) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type StockCompanyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*StockCompany `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *StockCompanyResponse) Reset() {
	*x = StockCompanyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StockCompanyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StockCompanyResponse) ProtoMessage() {}

func (x *StockCompanyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StockCompanyResponse.ProtoReflect.Descriptor instead.
func (*StockCompanyResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{14}
}

func (x *StockCompanyResponse) GetList() []*StockCompany {
	if x != nil {
		return x.List
	}
	return nil
}

// 上市公司管理层
type StkManagers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TsCode    string `protobuf:"bytes,1,opt,name=ts_code,proto3" json:"ts_code,omitempty"`        // TS股票代码
	AnnDate   string `protobuf:"bytes,2,opt,name=ann_date,proto3" json:"ann_date,omitempty"`      // 公告日期
	Name      string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`              // 姓名
	Gender    string `protobuf:"bytes,4,opt,name=gender,proto3" json:"gender,omitempty"`          // 性别
	Lev       string `protobuf:"bytes,5,opt,name=lev,proto3" json:"lev,omitempty"`                // 岗位类别
	Title     string `protobuf:"bytes,6,opt,name=title,proto3" json:"title,omitempty"`            // 岗位
	Edu       string `protobuf:"bytes,7,opt,name=edu,proto3" json:"edu,omitempty"`                // 学历
	National  string `protobuf:"bytes,8,opt,name=national,proto3" json:"national,omitempty"`      // 国籍
	Birthday  string `protobuf:"bytes,9,opt,name=birthday,proto3" json:"birthday,omitempty"`      // 出生年月
	BeginDate string `protobuf:"bytes,10,opt,name=begin_date,proto3" json:"begin_date,omitempty"` // 上任日期
	EndDate   string `protobuf:"bytes,11,opt,name=end_date,proto3" json:"end_date,omitempty"`     // 离任日期
	Resume    string `protobuf:"bytes,12,opt,name=resume,proto3" json:"resume,omitempty"`         // 个人简历
}

func (x *StkManagers) Reset() {
	*x = StkManagers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StkManagers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StkManagers) ProtoMessage() {}

func (x *StkManagers) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StkManagers.ProtoReflect.Descriptor instead.
func (*StkManagers) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{15}
}

func (x *StkManagers) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *StkManagers) GetAnnDate() string {
	if x != nil {
		return x.AnnDate
	}
	return ""
}

func (x *StkManagers) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StkManagers) GetGender() string {
	if x != nil {
		return x.Gender
	}
	return ""
}

func (x *StkManagers) GetLev() string {
	if x != nil {
		return x.Lev
	}
	return ""
}

func (x *StkManagers) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StkManagers) GetEdu() string {
	if x != nil {
		return x.Edu
	}
	return ""
}

func (x *StkManagers) GetNational() string {
	if x != nil {
		return x.National
	}
	return ""
}

func (x *StkManagers) GetBirthday() string {
	if x != nil {
		return x.Birthday
	}
	return ""
}

func (x *StkManagers) GetBeginDate() string {
	if x != nil {
		return x.BeginDate
	}
	return ""
}

func (x *StkManagers) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *StkManagers) GetResume() string {
	if x != nil {
		return x.Resume
	}
	return ""
}

type StkManagersRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields    []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	TsCode    string   `protobuf:"bytes,4,opt,name=ts_code,proto3" json:"ts_code,omitempty"`       //股票代码，支持单个或多个股票输入
	AnnDate   string   `protobuf:"bytes,5,opt,name=ann_date,proto3" json:"ann_date,omitempty"`     //公告日期（YYYYMMDD格式，下同）
	StartDate string   `protobuf:"bytes,6,opt,name=start_date,proto3" json:"start_date,omitempty"` //公告开始日期
	EndDate   string   `protobuf:"bytes,7,opt,name=end_date,proto3" json:"end_date,omitempty"`     //公告结束日期
}

func (x *StkManagersRequest) Reset() {
	*x = StkManagersRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StkManagersRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StkManagersRequest) ProtoMessage() {}

func (x *StkManagersRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StkManagersRequest.ProtoReflect.Descriptor instead.
func (*StkManagersRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{16}
}

func (x *StkManagersRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *StkManagersRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *StkManagersRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *StkManagersRequest) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *StkManagersRequest) GetAnnDate() string {
	if x != nil {
		return x.AnnDate
	}
	return ""
}

func (x *StkManagersRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *StkManagersRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type StkManagersResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*StkManagers `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *StkManagersResponse) Reset() {
	*x = StkManagersResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StkManagersResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StkManagersResponse) ProtoMessage() {}

func (x *StkManagersResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StkManagersResponse.ProtoReflect.Descriptor instead.
func (*StkManagersResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{17}
}

func (x *StkManagersResponse) GetList() []*StkManagers {
	if x != nil {
		return x.List
	}
	return nil
}

// 管理层薪酬和持股
type StkRewards struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TsCode  string  `protobuf:"bytes,1,opt,name=ts_code,proto3" json:"ts_code,omitempty"`     // TS股票代码
	AnnDate string  `protobuf:"bytes,2,opt,name=ann_date,proto3" json:"ann_date,omitempty"`   // 公告日期
	EndDate string  `protobuf:"bytes,3,opt,name=end_date,proto3" json:"end_date,omitempty"`   // 截止日期
	Name    string  `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`           // 姓名
	Title   string  `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty"`         // 职务
	Reward  float32 `protobuf:"fixed32,6,opt,name=reward,proto3" json:"reward,omitempty"`     // 报酬
	HoldVol float32 `protobuf:"fixed32,7,opt,name=hold_vol,proto3" json:"hold_vol,omitempty"` // 持股数
}

func (x *StkRewards) Reset() {
	*x = StkRewards{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StkRewards) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StkRewards) ProtoMessage() {}

func (x *StkRewards) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StkRewards.ProtoReflect.Descriptor instead.
func (*StkRewards) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{18}
}

func (x *StkRewards) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *StkRewards) GetAnnDate() string {
	if x != nil {
		return x.AnnDate
	}
	return ""
}

func (x *StkRewards) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *StkRewards) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StkRewards) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *StkRewards) GetReward() float32 {
	if x != nil {
		return x.Reward
	}
	return 0
}

func (x *StkRewards) GetHoldVol() float32 {
	if x != nil {
		return x.HoldVol
	}
	return 0
}

type StkRewardsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit   string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset  string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields  []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	TsCode  string   `protobuf:"bytes,4,opt,name=ts_code,proto3" json:"ts_code,omitempty"`   // TS股票代码，支持单个或多个代码输入
	EndDate string   `protobuf:"bytes,5,opt,name=end_date,proto3" json:"end_date,omitempty"` // 报告期
}

func (x *StkRewardsRequest) Reset() {
	*x = StkRewardsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StkRewardsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StkRewardsRequest) ProtoMessage() {}

func (x *StkRewardsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StkRewardsRequest.ProtoReflect.Descriptor instead.
func (*StkRewardsRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{19}
}

func (x *StkRewardsRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *StkRewardsRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *StkRewardsRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *StkRewardsRequest) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *StkRewardsRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type StkRewardsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*StkRewards `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *StkRewardsResponse) Reset() {
	*x = StkRewardsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StkRewardsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StkRewardsResponse) ProtoMessage() {}

func (x *StkRewardsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StkRewardsResponse.ProtoReflect.Descriptor instead.
func (*StkRewardsResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{20}
}

func (x *StkRewardsResponse) GetList() []*StkRewards {
	if x != nil {
		return x.List
	}
	return nil
}

// IPO新股列表
type NewShare struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TsCode       string  `protobuf:"bytes,1,opt,name=ts_code,proto3" json:"ts_code,omitempty"`               // TS股票代码
	SubCode      string  `protobuf:"bytes,2,opt,name=sub_code,proto3" json:"sub_code,omitempty"`             // 申购代码
	Name         string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                     // 名称
	IpoDate      string  `protobuf:"bytes,4,opt,name=ipo_date,proto3" json:"ipo_date,omitempty"`             // 上网发行日期
	IssueDate    string  `protobuf:"bytes,5,opt,name=issue_date,proto3" json:"issue_date,omitempty"`         // 上市日期
	Amount       float32 `protobuf:"fixed32,6,opt,name=amount,proto3" json:"amount,omitempty"`               // 发行总量（万股）
	MarketAmount float32 `protobuf:"fixed32,7,opt,name=market_amount,proto3" json:"market_amount,omitempty"` // 上网发行总量（万股）
	Price        float32 `protobuf:"fixed32,8,opt,name=price,proto3" json:"price,omitempty"`                 // 发行价格
	Pe           float32 `protobuf:"fixed32,9,opt,name=pe,proto3" json:"pe,omitempty"`                       // 市盈率
	LimitAmount  float32 `protobuf:"fixed32,10,opt,name=limit_amount,proto3" json:"limit_amount,omitempty"`  // 个人申购上限（万股）
	Funds        float32 `protobuf:"fixed32,11,opt,name=funds,proto3" json:"funds,omitempty"`                // 募集资金（亿元）
	Ballot       float32 `protobuf:"fixed32,12,opt,name=ballot,proto3" json:"ballot,omitempty"`              // 中签率
}

func (x *NewShare) Reset() {
	*x = NewShare{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewShare) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewShare) ProtoMessage() {}

func (x *NewShare) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewShare.ProtoReflect.Descriptor instead.
func (*NewShare) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{21}
}

func (x *NewShare) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *NewShare) GetSubCode() string {
	if x != nil {
		return x.SubCode
	}
	return ""
}

func (x *NewShare) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NewShare) GetIpoDate() string {
	if x != nil {
		return x.IpoDate
	}
	return ""
}

func (x *NewShare) GetIssueDate() string {
	if x != nil {
		return x.IssueDate
	}
	return ""
}

func (x *NewShare) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *NewShare) GetMarketAmount() float32 {
	if x != nil {
		return x.MarketAmount
	}
	return 0
}

func (x *NewShare) GetPrice() float32 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *NewShare) GetPe() float32 {
	if x != nil {
		return x.Pe
	}
	return 0
}

func (x *NewShare) GetLimitAmount() float32 {
	if x != nil {
		return x.LimitAmount
	}
	return 0
}

func (x *NewShare) GetFunds() float32 {
	if x != nil {
		return x.Funds
	}
	return 0
}

func (x *NewShare) GetBallot() float32 {
	if x != nil {
		return x.Ballot
	}
	return 0
}

type NewShareRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields    []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	StartDate string   `protobuf:"bytes,4,opt,name=start_date,proto3" json:"start_date,omitempty"` // 上网发行开始日期
	EndDate   string   `protobuf:"bytes,5,opt,name=end_date,proto3" json:"end_date,omitempty"`     // 上网发行结束日期
}

func (x *NewShareRequest) Reset() {
	*x = NewShareRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewShareRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewShareRequest) ProtoMessage() {}

func (x *NewShareRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewShareRequest.ProtoReflect.Descriptor instead.
func (*NewShareRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{22}
}

func (x *NewShareRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *NewShareRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *NewShareRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *NewShareRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *NewShareRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type NewShareResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*NewShare `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *NewShareResponse) Reset() {
	*x = NewShareResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NewShareResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NewShareResponse) ProtoMessage() {}

func (x *NewShareResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NewShareResponse.ProtoReflect.Descriptor instead.
func (*NewShareResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{23}
}

func (x *NewShareResponse) GetList() []*NewShare {
	if x != nil {
		return x.List
	}
	return nil
}

// 备用列表
type BakBasic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeDate        string  `protobuf:"bytes,1,opt,name=trade_date,proto3" json:"trade_date,omitempty"`                  // 交易日期
	TsCode           string  `protobuf:"bytes,2,opt,name=ts_code,proto3" json:"ts_code,omitempty"`                        // TS股票代码
	Name             string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                              // 股票名称
	Industry         string  `protobuf:"bytes,4,opt,name=industry,proto3" json:"industry,omitempty"`                      // 行业
	Area             string  `protobuf:"bytes,5,opt,name=area,proto3" json:"area,omitempty"`                              // 地域
	Pe               float32 `protobuf:"fixed32,6,opt,name=pe,proto3" json:"pe,omitempty"`                                // 市盈率（动）
	FloatShare       float32 `protobuf:"fixed32,7,opt,name=float_share,proto3" json:"float_share,omitempty"`              // 流通股本（亿）
	TotalShare       float32 `protobuf:"fixed32,8,opt,name=total_share,proto3" json:"total_share,omitempty"`              // 总股本（亿）
	TotalAssets      float32 `protobuf:"fixed32,9,opt,name=total_assets,proto3" json:"total_assets,omitempty"`            // 总资产（亿）
	LiquidAssets     float32 `protobuf:"fixed32,10,opt,name=liquid_assets,proto3" json:"liquid_assets,omitempty"`         // 流动资产（亿）
	FixedAssets      float32 `protobuf:"fixed32,11,opt,name=fixed_assets,proto3" json:"fixed_assets,omitempty"`           // 固定资产（亿）
	Reserved         float32 `protobuf:"fixed32,12,opt,name=reserved,proto3" json:"reserved,omitempty"`                   // 公积金
	ReservedPershare float32 `protobuf:"fixed32,13,opt,name=reserved_pershare,proto3" json:"reserved_pershare,omitempty"` // 每股公积金
	Eps              float32 `protobuf:"fixed32,14,opt,name=eps,proto3" json:"eps,omitempty"`                             // 每股收益
	Bvps             float32 `protobuf:"fixed32,15,opt,name=bvps,proto3" json:"bvps,omitempty"`                           // 每股净资产
	Pb               float32 `protobuf:"fixed32,16,opt,name=pb,proto3" json:"pb,omitempty"`                               // 市净率
	ListDate         string  `protobuf:"bytes,17,opt,name=list_date,proto3" json:"list_date,omitempty"`                   // 上市日期
	Undp             float32 `protobuf:"fixed32,18,opt,name=undp,proto3" json:"undp,omitempty"`                           // 未分配利润
	PerUndp          float32 `protobuf:"fixed32,19,opt,name=per_undp,proto3" json:"per_undp,omitempty"`                   // 每股未分配利润
	RevYoy           float32 `protobuf:"fixed32,20,opt,name=rev_yoy,proto3" json:"rev_yoy,omitempty"`                     // 收入同比（%）
	ProfitYoy        float32 `protobuf:"fixed32,21,opt,name=profit_yoy,proto3" json:"profit_yoy,omitempty"`               // 利润同比（%）
	Gpr              float32 `protobuf:"fixed32,22,opt,name=gpr,proto3" json:"gpr,omitempty"`                             // 毛利率（%）
	Npr              float32 `protobuf:"fixed32,23,opt,name=npr,proto3" json:"npr,omitempty"`                             // 净利润率（%）
	HolderNum        int64   `protobuf:"varint,24,opt,name=holder_num,proto3" json:"holder_num,omitempty"`                // 股东人数
}

func (x *BakBasic) Reset() {
	*x = BakBasic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakBasic) ProtoMessage() {}

func (x *BakBasic) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakBasic.ProtoReflect.Descriptor instead.
func (*BakBasic) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{24}
}

func (x *BakBasic) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *BakBasic) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *BakBasic) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BakBasic) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

func (x *BakBasic) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *BakBasic) GetPe() float32 {
	if x != nil {
		return x.Pe
	}
	return 0
}

func (x *BakBasic) GetFloatShare() float32 {
	if x != nil {
		return x.FloatShare
	}
	return 0
}

func (x *BakBasic) GetTotalShare() float32 {
	if x != nil {
		return x.TotalShare
	}
	return 0
}

func (x *BakBasic) GetTotalAssets() float32 {
	if x != nil {
		return x.TotalAssets
	}
	return 0
}

func (x *BakBasic) GetLiquidAssets() float32 {
	if x != nil {
		return x.LiquidAssets
	}
	return 0
}

func (x *BakBasic) GetFixedAssets() float32 {
	if x != nil {
		return x.FixedAssets
	}
	return 0
}

func (x *BakBasic) GetReserved() float32 {
	if x != nil {
		return x.Reserved
	}
	return 0
}

func (x *BakBasic) GetReservedPershare() float32 {
	if x != nil {
		return x.ReservedPershare
	}
	return 0
}

func (x *BakBasic) GetEps() float32 {
	if x != nil {
		return x.Eps
	}
	return 0
}

func (x *BakBasic) GetBvps() float32 {
	if x != nil {
		return x.Bvps
	}
	return 0
}

func (x *BakBasic) GetPb() float32 {
	if x != nil {
		return x.Pb
	}
	return 0
}

func (x *BakBasic) GetListDate() string {
	if x != nil {
		return x.ListDate
	}
	return ""
}

func (x *BakBasic) GetUndp() float32 {
	if x != nil {
		return x.Undp
	}
	return 0
}

func (x *BakBasic) GetPerUndp() float32 {
	if x != nil {
		return x.PerUndp
	}
	return 0
}

func (x *BakBasic) GetRevYoy() float32 {
	if x != nil {
		return x.RevYoy
	}
	return 0
}

func (x *BakBasic) GetProfitYoy() float32 {
	if x != nil {
		return x.ProfitYoy
	}
	return 0
}

func (x *BakBasic) GetGpr() float32 {
	if x != nil {
		return x.Gpr
	}
	return 0
}

func (x *BakBasic) GetNpr() float32 {
	if x != nil {
		return x.Npr
	}
	return 0
}

func (x *BakBasic) GetHolderNum() int64 {
	if x != nil {
		return x.HolderNum
	}
	return 0
}

type BakBasicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields    []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	TradeDate string   `protobuf:"bytes,4,opt,name=trade_date,proto3" json:"trade_date,omitempty"` // 交易日期
	TsCode    string   `protobuf:"bytes,5,opt,name=ts_code,proto3" json:"ts_code,omitempty"`       // 股票代码
}

func (x *BakBasicRequest) Reset() {
	*x = BakBasicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakBasicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakBasicRequest) ProtoMessage() {}

func (x *BakBasicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakBasicRequest.ProtoReflect.Descriptor instead.
func (*BakBasicRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{25}
}

func (x *BakBasicRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *BakBasicRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *BakBasicRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *BakBasicRequest) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *BakBasicRequest) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

type BakBasicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*BakBasic `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *BakBasicResponse) Reset() {
	*x = BakBasicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakBasicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakBasicResponse) ProtoMessage() {}

func (x *BakBasicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakBasicResponse.ProtoReflect.Descriptor instead.
func (*BakBasicResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{26}
}

func (x *BakBasicResponse) GetList() []*BakBasic {
	if x != nil {
		return x.List
	}
	return nil
}

// 日线行情
type Daily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TsCode    string  `protobuf:"bytes,1,opt,name=ts_code,proto3" json:"ts_code,omitempty"`       // 股票代码
	TradeDate string  `protobuf:"bytes,2,opt,name=trade_date,proto3" json:"trade_date,omitempty"` // 交易日期
	Open      float32 `protobuf:"fixed32,3,opt,name=open,proto3" json:"open,omitempty"`           // 开盘价
	High      float32 `protobuf:"fixed32,4,opt,name=high,proto3" json:"high,omitempty"`           // 最高价
	Low       float32 `protobuf:"fixed32,5,opt,name=low,proto3" json:"low,omitempty"`             // 最低价
	Close     float32 `protobuf:"fixed32,6,opt,name=close,proto3" json:"close,omitempty"`         // 收盘价
	PreClose  float32 `protobuf:"fixed32,7,opt,name=pre_close,proto3" json:"pre_close,omitempty"` // 昨收价(前复权)
	Change    float32 `protobuf:"fixed32,8,opt,name=change,proto3" json:"change,omitempty"`       // 涨跌额
	PctChg    float32 `protobuf:"fixed32,9,opt,name=pct_chg,proto3" json:"pct_chg,omitempty"`     // 涨跌幅 （未复权，如果是复权请用 通用行情接口 ）
	Vol       float32 `protobuf:"fixed32,10,opt,name=vol,proto3" json:"vol,omitempty"`            // 成交量 （手）
	Amount    float32 `protobuf:"fixed32,11,opt,name=amount,proto3" json:"amount,omitempty"`      // 成交额 （千元）
}

func (x *Daily) Reset() {
	*x = Daily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Daily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Daily) ProtoMessage() {}

func (x *Daily) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Daily.ProtoReflect.Descriptor instead.
func (*Daily) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{27}
}

func (x *Daily) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *Daily) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *Daily) GetOpen() float32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Daily) GetHigh() float32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Daily) GetLow() float32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Daily) GetClose() float32 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *Daily) GetPreClose() float32 {
	if x != nil {
		return x.PreClose
	}
	return 0
}

func (x *Daily) GetChange() float32 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *Daily) GetPctChg() float32 {
	if x != nil {
		return x.PctChg
	}
	return 0
}

func (x *Daily) GetVol() float32 {
	if x != nil {
		return x.Vol
	}
	return 0
}

func (x *Daily) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type DailyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields    []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	TsCode    string   `protobuf:"bytes,4,opt,name=ts_code,proto3" json:"ts_code,omitempty"`       // 股票代码（支持多个股票同时提取，逗号分隔）
	TradeDate string   `protobuf:"bytes,5,opt,name=trade_date,proto3" json:"trade_date,omitempty"` // 交易日期（YYYYMMDD）
	StartDate string   `protobuf:"bytes,6,opt,name=start_date,proto3" json:"start_date,omitempty"` // 开始日期(YYYYMMDD)
	EndDate   string   `protobuf:"bytes,7,opt,name=end_date,proto3" json:"end_date,omitempty"`     // 结束日期(YYYYMMDD)
}

func (x *DailyRequest) Reset() {
	*x = DailyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyRequest) ProtoMessage() {}

func (x *DailyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyRequest.ProtoReflect.Descriptor instead.
func (*DailyRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{28}
}

func (x *DailyRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *DailyRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *DailyRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *DailyRequest) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *DailyRequest) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *DailyRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *DailyRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type DailyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Daily `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *DailyResponse) Reset() {
	*x = DailyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyResponse) ProtoMessage() {}

func (x *DailyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyResponse.ProtoReflect.Descriptor instead.
func (*DailyResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{29}
}

func (x *DailyResponse) GetList() []*Daily {
	if x != nil {
		return x.List
	}
	return nil
}

// 周线行情
type Weekly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TsCode    string  `protobuf:"bytes,1,opt,name=ts_code,proto3" json:"ts_code,omitempty"`       // 股票代码
	TradeDate string  `protobuf:"bytes,2,opt,name=trade_date,proto3" json:"trade_date,omitempty"` // 交易日期
	Close     float32 `protobuf:"fixed32,3,opt,name=close,proto3" json:"close,omitempty"`         // 周收盘价
	Open      float32 `protobuf:"fixed32,4,opt,name=open,proto3" json:"open,omitempty"`           // 周开盘价
	High      float32 `protobuf:"fixed32,5,opt,name=high,proto3" json:"high,omitempty"`           // 周最高价
	Low       float32 `protobuf:"fixed32,6,opt,name=low,proto3" json:"low,omitempty"`             // 周最低价
	PreClose  float32 `protobuf:"fixed32,7,opt,name=pre_close,proto3" json:"pre_close,omitempty"` // 上一周收盘价
	Change    float32 `protobuf:"fixed32,8,opt,name=change,proto3" json:"change,omitempty"`       // 周涨跌额
	PctChg    float32 `protobuf:"fixed32,9,opt,name=pct_chg,proto3" json:"pct_chg,omitempty"`     // 周涨跌幅（未复权，如果是复权请用 通用行情接口 ）
	Vol       float32 `protobuf:"fixed32,10,opt,name=vol,proto3" json:"vol,omitempty"`            // 周成交量
	Amount    float32 `protobuf:"fixed32,11,opt,name=amount,proto3" json:"amount,omitempty"`      // 周成交额
}

func (x *Weekly) Reset() {
	*x = Weekly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Weekly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Weekly) ProtoMessage() {}

func (x *Weekly) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Weekly.ProtoReflect.Descriptor instead.
func (*Weekly) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{30}
}

func (x *Weekly) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *Weekly) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *Weekly) GetClose() float32 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *Weekly) GetOpen() float32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Weekly) GetHigh() float32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Weekly) GetLow() float32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Weekly) GetPreClose() float32 {
	if x != nil {
		return x.PreClose
	}
	return 0
}

func (x *Weekly) GetChange() float32 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *Weekly) GetPctChg() float32 {
	if x != nil {
		return x.PctChg
	}
	return 0
}

func (x *Weekly) GetVol() float32 {
	if x != nil {
		return x.Vol
	}
	return 0
}

func (x *Weekly) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type WeeklyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields    []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	TsCode    string   `protobuf:"bytes,4,opt,name=ts_code,proto3" json:"ts_code,omitempty"`       // TS代码 （ts_code,trade_date两个参数任选一）
	TradeDate string   `protobuf:"bytes,5,opt,name=trade_date,proto3" json:"trade_date,omitempty"` // 交易日期 （每周最后一个交易日期，YYYYMMDD格式）
	StartDate string   `protobuf:"bytes,6,opt,name=start_date,proto3" json:"start_date,omitempty"` // 开始日期
	EndDate   string   `protobuf:"bytes,7,opt,name=end_date,proto3" json:"end_date,omitempty"`     // 结束日期
}

func (x *WeeklyRequest) Reset() {
	*x = WeeklyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeeklyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeeklyRequest) ProtoMessage() {}

func (x *WeeklyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeeklyRequest.ProtoReflect.Descriptor instead.
func (*WeeklyRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{31}
}

func (x *WeeklyRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *WeeklyRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *WeeklyRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *WeeklyRequest) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *WeeklyRequest) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *WeeklyRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *WeeklyRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type WeeklyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Weekly `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *WeeklyResponse) Reset() {
	*x = WeeklyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WeeklyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WeeklyResponse) ProtoMessage() {}

func (x *WeeklyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WeeklyResponse.ProtoReflect.Descriptor instead.
func (*WeeklyResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{32}
}

func (x *WeeklyResponse) GetList() []*Weekly {
	if x != nil {
		return x.List
	}
	return nil
}

// 月线行情
type Monthly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TsCode    string  `protobuf:"bytes,1,opt,name=ts_code,proto3" json:"ts_code,omitempty"`       // 股票代码
	TradeDate string  `protobuf:"bytes,2,opt,name=trade_date,proto3" json:"trade_date,omitempty"` // 交易日期
	Close     float32 `protobuf:"fixed32,3,opt,name=close,proto3" json:"close,omitempty"`         // 月收盘价
	Open      float32 `protobuf:"fixed32,4,opt,name=open,proto3" json:"open,omitempty"`           // 月开盘价
	High      float32 `protobuf:"fixed32,5,opt,name=high,proto3" json:"high,omitempty"`           // 月最高价
	Low       float32 `protobuf:"fixed32,6,opt,name=low,proto3" json:"low,omitempty"`             // 月最低价
	PreClose  float32 `protobuf:"fixed32,7,opt,name=pre_close,proto3" json:"pre_close,omitempty"` // 上月收盘价
	Change    float32 `protobuf:"fixed32,8,opt,name=change,proto3" json:"change,omitempty"`       // 月涨跌额
	PctChg    float32 `protobuf:"fixed32,9,opt,name=pct_chg,proto3" json:"pct_chg,omitempty"`     // 月涨跌幅（未复权，如果是复权请用 通用行情接口 ）
	Vol       float32 `protobuf:"fixed32,10,opt,name=vol,proto3" json:"vol,omitempty"`            // 月成交量
	Amount    float32 `protobuf:"fixed32,11,opt,name=amount,proto3" json:"amount,omitempty"`      // 月成交额
}

func (x *Monthly) Reset() {
	*x = Monthly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Monthly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Monthly) ProtoMessage() {}

func (x *Monthly) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Monthly.ProtoReflect.Descriptor instead.
func (*Monthly) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{33}
}

func (x *Monthly) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *Monthly) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *Monthly) GetClose() float32 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *Monthly) GetOpen() float32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *Monthly) GetHigh() float32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *Monthly) GetLow() float32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *Monthly) GetPreClose() float32 {
	if x != nil {
		return x.PreClose
	}
	return 0
}

func (x *Monthly) GetChange() float32 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *Monthly) GetPctChg() float32 {
	if x != nil {
		return x.PctChg
	}
	return 0
}

func (x *Monthly) GetVol() float32 {
	if x != nil {
		return x.Vol
	}
	return 0
}

func (x *Monthly) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type MonthlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields    []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	TsCode    string   `protobuf:"bytes,4,opt,name=ts_code,proto3" json:"ts_code,omitempty"`       // TS代码 （ts_code,trade_date两个参数任选一）
	TradeDate string   `protobuf:"bytes,5,opt,name=trade_date,proto3" json:"trade_date,omitempty"` // 交易日期 （每月最后一个交易日日期，YYYYMMDD格式）
	StartDate string   `protobuf:"bytes,6,opt,name=start_date,proto3" json:"start_date,omitempty"` // 开始日期
	EndDate   string   `protobuf:"bytes,7,opt,name=end_date,proto3" json:"end_date,omitempty"`     // 结束日期
}

func (x *MonthlyRequest) Reset() {
	*x = MonthlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthlyRequest) ProtoMessage() {}

func (x *MonthlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthlyRequest.ProtoReflect.Descriptor instead.
func (*MonthlyRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{34}
}

func (x *MonthlyRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *MonthlyRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *MonthlyRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *MonthlyRequest) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *MonthlyRequest) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *MonthlyRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *MonthlyRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type MonthlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Monthly `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MonthlyResponse) Reset() {
	*x = MonthlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MonthlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MonthlyResponse) ProtoMessage() {}

func (x *MonthlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MonthlyResponse.ProtoReflect.Descriptor instead.
func (*MonthlyResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{35}
}

func (x *MonthlyResponse) GetList() []*Monthly {
	if x != nil {
		return x.List
	}
	return nil
}

// 复权因子
type AdjFactor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TsCode    string  `protobuf:"bytes,1,opt,name=ts_code,proto3" json:"ts_code,omitempty"`         // 股票代码
	TradeDate string  `protobuf:"bytes,2,opt,name=trade_date,proto3" json:"trade_date,omitempty"`   // 交易日期
	AdjFactor float32 `protobuf:"fixed32,3,opt,name=adj_factor,proto3" json:"adj_factor,omitempty"` // 复权因子
}

func (x *AdjFactor) Reset() {
	*x = AdjFactor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdjFactor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjFactor) ProtoMessage() {}

func (x *AdjFactor) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjFactor.ProtoReflect.Descriptor instead.
func (*AdjFactor) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{36}
}

func (x *AdjFactor) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *AdjFactor) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *AdjFactor) GetAdjFactor() float32 {
	if x != nil {
		return x.AdjFactor
	}
	return 0
}

type AdjFactorRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields    []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	TsCode    string   `protobuf:"bytes,4,opt,name=ts_code,proto3" json:"ts_code,omitempty"`       // 股票代码
	TradeDate string   `protobuf:"bytes,5,opt,name=trade_date,proto3" json:"trade_date,omitempty"` // 交易日期(YYYYMMDD，下同)
	StartDate string   `protobuf:"bytes,6,opt,name=start_date,proto3" json:"start_date,omitempty"` // 开始日期
	EndDate   string   `protobuf:"bytes,7,opt,name=end_date,proto3" json:"end_date,omitempty"`     // 结束日期
}

func (x *AdjFactorRequest) Reset() {
	*x = AdjFactorRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdjFactorRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjFactorRequest) ProtoMessage() {}

func (x *AdjFactorRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjFactorRequest.ProtoReflect.Descriptor instead.
func (*AdjFactorRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{37}
}

func (x *AdjFactorRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *AdjFactorRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *AdjFactorRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *AdjFactorRequest) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *AdjFactorRequest) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *AdjFactorRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *AdjFactorRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type AdjFactorResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*AdjFactor `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *AdjFactorResponse) Reset() {
	*x = AdjFactorResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AdjFactorResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AdjFactorResponse) ProtoMessage() {}

func (x *AdjFactorResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AdjFactorResponse.ProtoReflect.Descriptor instead.
func (*AdjFactorResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{38}
}

func (x *AdjFactorResponse) GetList() []*AdjFactor {
	if x != nil {
		return x.List
	}
	return nil
}

// 每日指标
type DailyBasic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TsCode        string  `protobuf:"bytes,1,opt,name=ts_code,proto3" json:"ts_code,omitempty"`                   // TS股票代码
	TradeDate     string  `protobuf:"bytes,2,opt,name=trade_date,proto3" json:"trade_date,omitempty"`             // 交易日期
	Close         float32 `protobuf:"fixed32,3,opt,name=close,proto3" json:"close,omitempty"`                     // 当日收盘价
	TurnoverRate  float32 `protobuf:"fixed32,4,opt,name=turnover_rate,proto3" json:"turnover_rate,omitempty"`     // 换手率（%）
	TurnoverRateF float32 `protobuf:"fixed32,5,opt,name=turnover_rate_f,proto3" json:"turnover_rate_f,omitempty"` // 换手率（自由流通股）
	VolumeRatio   float32 `protobuf:"fixed32,6,opt,name=volume_ratio,proto3" json:"volume_ratio,omitempty"`       // 量比
	Pe            float32 `protobuf:"fixed32,7,opt,name=pe,proto3" json:"pe,omitempty"`                           // 市盈率（总市值/净利润，亏损的PE为空）
	PeTtm         float32 `protobuf:"fixed32,8,opt,name=pe_ttm,proto3" json:"pe_ttm,omitempty"`                   // 市盈率（TTM，亏损的PE为空）
	Pb            float32 `protobuf:"fixed32,9,opt,name=pb,proto3" json:"pb,omitempty"`                           // 市净率（总市值/净资产）
	Ps            float32 `protobuf:"fixed32,10,opt,name=ps,proto3" json:"ps,omitempty"`                          // 市销率
	PsTtm         float32 `protobuf:"fixed32,11,opt,name=ps_ttm,proto3" json:"ps_ttm,omitempty"`                  // 市销率（TTM）
	DvRatio       float32 `protobuf:"fixed32,12,opt,name=dv_ratio,proto3" json:"dv_ratio,omitempty"`              // 股息率（%）
	DvTtm         float32 `protobuf:"fixed32,13,opt,name=dv_ttm,proto3" json:"dv_ttm,omitempty"`                  // 股息率（TTM）（%）
	TotalShare    float32 `protobuf:"fixed32,14,opt,name=total_share,proto3" json:"total_share,omitempty"`        // 总股本（万股）
	FloatShare    float32 `protobuf:"fixed32,15,opt,name=float_share,proto3" json:"float_share,omitempty"`        // 流通股本（万股）
	FreeShare     float32 `protobuf:"fixed32,16,opt,name=free_share,proto3" json:"free_share,omitempty"`          // 自由流通股本（万）
	TotalMv       float32 `protobuf:"fixed32,17,opt,name=total_mv,proto3" json:"total_mv,omitempty"`              // 总市值 （万元）
	CircMv        float32 `protobuf:"fixed32,18,opt,name=circ_mv,proto3" json:"circ_mv,omitempty"`                // 流通市值（万元）
}

func (x *DailyBasic) Reset() {
	*x = DailyBasic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyBasic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyBasic) ProtoMessage() {}

func (x *DailyBasic) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyBasic.ProtoReflect.Descriptor instead.
func (*DailyBasic) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{39}
}

func (x *DailyBasic) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *DailyBasic) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *DailyBasic) GetClose() float32 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *DailyBasic) GetTurnoverRate() float32 {
	if x != nil {
		return x.TurnoverRate
	}
	return 0
}

func (x *DailyBasic) GetTurnoverRateF() float32 {
	if x != nil {
		return x.TurnoverRateF
	}
	return 0
}

func (x *DailyBasic) GetVolumeRatio() float32 {
	if x != nil {
		return x.VolumeRatio
	}
	return 0
}

func (x *DailyBasic) GetPe() float32 {
	if x != nil {
		return x.Pe
	}
	return 0
}

func (x *DailyBasic) GetPeTtm() float32 {
	if x != nil {
		return x.PeTtm
	}
	return 0
}

func (x *DailyBasic) GetPb() float32 {
	if x != nil {
		return x.Pb
	}
	return 0
}

func (x *DailyBasic) GetPs() float32 {
	if x != nil {
		return x.Ps
	}
	return 0
}

func (x *DailyBasic) GetPsTtm() float32 {
	if x != nil {
		return x.PsTtm
	}
	return 0
}

func (x *DailyBasic) GetDvRatio() float32 {
	if x != nil {
		return x.DvRatio
	}
	return 0
}

func (x *DailyBasic) GetDvTtm() float32 {
	if x != nil {
		return x.DvTtm
	}
	return 0
}

func (x *DailyBasic) GetTotalShare() float32 {
	if x != nil {
		return x.TotalShare
	}
	return 0
}

func (x *DailyBasic) GetFloatShare() float32 {
	if x != nil {
		return x.FloatShare
	}
	return 0
}

func (x *DailyBasic) GetFreeShare() float32 {
	if x != nil {
		return x.FreeShare
	}
	return 0
}

func (x *DailyBasic) GetTotalMv() float32 {
	if x != nil {
		return x.TotalMv
	}
	return 0
}

func (x *DailyBasic) GetCircMv() float32 {
	if x != nil {
		return x.CircMv
	}
	return 0
}

type DailyBasicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields    []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	TsCode    string   `protobuf:"bytes,4,opt,name=ts_code,proto3" json:"ts_code,omitempty"`       // 股票代码（二选一）
	TradeDate string   `protobuf:"bytes,5,opt,name=trade_date,proto3" json:"trade_date,omitempty"` // 交易日期 （二选一）
	StartDate string   `protobuf:"bytes,6,opt,name=start_date,proto3" json:"start_date,omitempty"` // 开始日期(YYYYMMDD)
	EndDate   string   `protobuf:"bytes,7,opt,name=end_date,proto3" json:"end_date,omitempty"`     // 结束日期(YYYYMMDD)
}

func (x *DailyBasicRequest) Reset() {
	*x = DailyBasicRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyBasicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyBasicRequest) ProtoMessage() {}

func (x *DailyBasicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyBasicRequest.ProtoReflect.Descriptor instead.
func (*DailyBasicRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{40}
}

func (x *DailyBasicRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *DailyBasicRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *DailyBasicRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *DailyBasicRequest) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *DailyBasicRequest) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *DailyBasicRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *DailyBasicRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type DailyBasicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*DailyBasic `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *DailyBasicResponse) Reset() {
	*x = DailyBasicResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DailyBasicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DailyBasicResponse) ProtoMessage() {}

func (x *DailyBasicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DailyBasicResponse.ProtoReflect.Descriptor instead.
func (*DailyBasicResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{41}
}

func (x *DailyBasicResponse) GetList() []*DailyBasic {
	if x != nil {
		return x.List
	}
	return nil
}

// 个股资金流向
type MoneyFlow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TsCode        string  `protobuf:"bytes,1,opt,name=ts_code,proto3" json:"ts_code,omitempty"`                    // TS代码
	TradeDate     string  `protobuf:"bytes,2,opt,name=trade_date,proto3" json:"trade_date,omitempty"`              // 交易日期
	BuySmVol      int64   `protobuf:"varint,3,opt,name=buy_sm_vol,proto3" json:"buy_sm_vol,omitempty"`             // 小单买入量（手）
	BuySmAmount   float32 `protobuf:"fixed32,4,opt,name=buy_sm_amount,proto3" json:"buy_sm_amount,omitempty"`      // 小单买入金额（万元）
	SellSmVol     int64   `protobuf:"varint,5,opt,name=sell_sm_vol,proto3" json:"sell_sm_vol,omitempty"`           // 小单卖出量（手）
	SellSmAmount  float32 `protobuf:"fixed32,6,opt,name=sell_sm_amount,proto3" json:"sell_sm_amount,omitempty"`    // 小单卖出金额（万元）
	BuyMdVol      int64   `protobuf:"varint,7,opt,name=buy_md_vol,proto3" json:"buy_md_vol,omitempty"`             // 中单买入量（手）
	BuyMdAmount   float32 `protobuf:"fixed32,8,opt,name=buy_md_amount,proto3" json:"buy_md_amount,omitempty"`      // 中单买入金额（万元）
	SellMdVol     int64   `protobuf:"varint,9,opt,name=sell_md_vol,proto3" json:"sell_md_vol,omitempty"`           // 中单卖出量（手）
	SellMdAmount  float32 `protobuf:"fixed32,10,opt,name=sell_md_amount,proto3" json:"sell_md_amount,omitempty"`   // 中单卖出金额（万元）
	BuyLgVol      int64   `protobuf:"varint,11,opt,name=buy_lg_vol,proto3" json:"buy_lg_vol,omitempty"`            // 大单买入量（手）
	BuyLgAmount   float32 `protobuf:"fixed32,12,opt,name=buy_lg_amount,proto3" json:"buy_lg_amount,omitempty"`     // 大单买入金额（万元）
	SellLgVol     int64   `protobuf:"varint,13,opt,name=sell_lg_vol,proto3" json:"sell_lg_vol,omitempty"`          // 大单卖出量（手）
	SellLgAmount  float32 `protobuf:"fixed32,14,opt,name=sell_lg_amount,proto3" json:"sell_lg_amount,omitempty"`   // 大单卖出金额（万元）
	BuyElgVol     int64   `protobuf:"varint,15,opt,name=buy_elg_vol,proto3" json:"buy_elg_vol,omitempty"`          // 特大单买入量（手）
	BuyElgAmount  float32 `protobuf:"fixed32,16,opt,name=buy_elg_amount,proto3" json:"buy_elg_amount,omitempty"`   // 特大单买入金额（万元）
	SellElgVol    int64   `protobuf:"varint,17,opt,name=sell_elg_vol,proto3" json:"sell_elg_vol,omitempty"`        // 特大单卖出量（手）
	SellElgAmount float32 `protobuf:"fixed32,18,opt,name=sell_elg_amount,proto3" json:"sell_elg_amount,omitempty"` // 特大单卖出金额（万元）
	NetMfVol      int64   `protobuf:"varint,19,opt,name=net_mf_vol,proto3" json:"net_mf_vol,omitempty"`            // 净流入量（手）
	NetMfAmount   float32 `protobuf:"fixed32,20,opt,name=net_mf_amount,proto3" json:"net_mf_amount,omitempty"`     // 净流入额（万元）
}

func (x *MoneyFlow) Reset() {
	*x = MoneyFlow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyFlow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyFlow) ProtoMessage() {}

func (x *MoneyFlow) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyFlow.ProtoReflect.Descriptor instead.
func (*MoneyFlow) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{42}
}

func (x *MoneyFlow) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *MoneyFlow) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *MoneyFlow) GetBuySmVol() int64 {
	if x != nil {
		return x.BuySmVol
	}
	return 0
}

func (x *MoneyFlow) GetBuySmAmount() float32 {
	if x != nil {
		return x.BuySmAmount
	}
	return 0
}

func (x *MoneyFlow) GetSellSmVol() int64 {
	if x != nil {
		return x.SellSmVol
	}
	return 0
}

func (x *MoneyFlow) GetSellSmAmount() float32 {
	if x != nil {
		return x.SellSmAmount
	}
	return 0
}

func (x *MoneyFlow) GetBuyMdVol() int64 {
	if x != nil {
		return x.BuyMdVol
	}
	return 0
}

func (x *MoneyFlow) GetBuyMdAmount() float32 {
	if x != nil {
		return x.BuyMdAmount
	}
	return 0
}

func (x *MoneyFlow) GetSellMdVol() int64 {
	if x != nil {
		return x.SellMdVol
	}
	return 0
}

func (x *MoneyFlow) GetSellMdAmount() float32 {
	if x != nil {
		return x.SellMdAmount
	}
	return 0
}

func (x *MoneyFlow) GetBuyLgVol() int64 {
	if x != nil {
		return x.BuyLgVol
	}
	return 0
}

func (x *MoneyFlow) GetBuyLgAmount() float32 {
	if x != nil {
		return x.BuyLgAmount
	}
	return 0
}

func (x *MoneyFlow) GetSellLgVol() int64 {
	if x != nil {
		return x.SellLgVol
	}
	return 0
}

func (x *MoneyFlow) GetSellLgAmount() float32 {
	if x != nil {
		return x.SellLgAmount
	}
	return 0
}

func (x *MoneyFlow) GetBuyElgVol() int64 {
	if x != nil {
		return x.BuyElgVol
	}
	return 0
}

func (x *MoneyFlow) GetBuyElgAmount() float32 {
	if x != nil {
		return x.BuyElgAmount
	}
	return 0
}

func (x *MoneyFlow) GetSellElgVol() int64 {
	if x != nil {
		return x.SellElgVol
	}
	return 0
}

func (x *MoneyFlow) GetSellElgAmount() float32 {
	if x != nil {
		return x.SellElgAmount
	}
	return 0
}

func (x *MoneyFlow) GetNetMfVol() int64 {
	if x != nil {
		return x.NetMfVol
	}
	return 0
}

func (x *MoneyFlow) GetNetMfAmount() float32 {
	if x != nil {
		return x.NetMfAmount
	}
	return 0
}

type MoneyFlowRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields    []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	TsCode    string   `protobuf:"bytes,4,opt,name=ts_code,proto3" json:"ts_code,omitempty"`       // 股票代码（股票和时间参数至少输入一个）
	TradeDate string   `protobuf:"bytes,5,opt,name=trade_date,proto3" json:"trade_date,omitempty"` // 交易日期
	StartDate string   `protobuf:"bytes,6,opt,name=start_date,proto3" json:"start_date,omitempty"` // 开始日期
	EndDate   string   `protobuf:"bytes,7,opt,name=end_date,proto3" json:"end_date,omitempty"`     // 结束日期
}

func (x *MoneyFlowRequest) Reset() {
	*x = MoneyFlowRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyFlowRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyFlowRequest) ProtoMessage() {}

func (x *MoneyFlowRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyFlowRequest.ProtoReflect.Descriptor instead.
func (*MoneyFlowRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{43}
}

func (x *MoneyFlowRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *MoneyFlowRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *MoneyFlowRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *MoneyFlowRequest) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *MoneyFlowRequest) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *MoneyFlowRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *MoneyFlowRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type MoneyFlowResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MoneyFlow `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MoneyFlowResponse) Reset() {
	*x = MoneyFlowResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyFlowResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyFlowResponse) ProtoMessage() {}

func (x *MoneyFlowResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyFlowResponse.ProtoReflect.Descriptor instead.
func (*MoneyFlowResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{44}
}

func (x *MoneyFlowResponse) GetList() []*MoneyFlow {
	if x != nil {
		return x.List
	}
	return nil
}

// 每日涨跌停价格
type StkLimit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeDate string  `protobuf:"bytes,1,opt,name=trade_date,proto3" json:"trade_date,omitempty"`   // 交易日期
	TsCode    string  `protobuf:"bytes,2,opt,name=ts_code,proto3" json:"ts_code,omitempty"`         // TS股票代码
	PreClose  float32 `protobuf:"fixed32,3,opt,name=pre_close,proto3" json:"pre_close,omitempty"`   // 昨日收盘价
	UpLimit   float32 `protobuf:"fixed32,4,opt,name=up_limit,proto3" json:"up_limit,omitempty"`     // 涨停价
	DownLimit float32 `protobuf:"fixed32,5,opt,name=down_limit,proto3" json:"down_limit,omitempty"` // 跌停价
}

func (x *StkLimit) Reset() {
	*x = StkLimit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StkLimit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StkLimit) ProtoMessage() {}

func (x *StkLimit) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StkLimit.ProtoReflect.Descriptor instead.
func (*StkLimit) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{45}
}

func (x *StkLimit) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *StkLimit) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *StkLimit) GetPreClose() float32 {
	if x != nil {
		return x.PreClose
	}
	return 0
}

func (x *StkLimit) GetUpLimit() float32 {
	if x != nil {
		return x.UpLimit
	}
	return 0
}

func (x *StkLimit) GetDownLimit() float32 {
	if x != nil {
		return x.DownLimit
	}
	return 0
}

type StkLimitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields    []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	TsCode    string   `protobuf:"bytes,4,opt,name=ts_code,proto3" json:"ts_code,omitempty"`       // 股票代码
	TradeDate string   `protobuf:"bytes,5,opt,name=trade_date,proto3" json:"trade_date,omitempty"` // 交易日期(YYYYMMDD，下同)
	StartDate string   `protobuf:"bytes,6,opt,name=start_date,proto3" json:"start_date,omitempty"` // 开始日期
	EndDate   string   `protobuf:"bytes,7,opt,name=end_date,proto3" json:"end_date,omitempty"`     // 结束日期
}

func (x *StkLimitRequest) Reset() {
	*x = StkLimitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StkLimitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StkLimitRequest) ProtoMessage() {}

func (x *StkLimitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StkLimitRequest.ProtoReflect.Descriptor instead.
func (*StkLimitRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{46}
}

func (x *StkLimitRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *StkLimitRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *StkLimitRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *StkLimitRequest) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *StkLimitRequest) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *StkLimitRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *StkLimitRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type StkLimitResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*StkLimit `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *StkLimitResponse) Reset() {
	*x = StkLimitResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StkLimitResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StkLimitResponse) ProtoMessage() {}

func (x *StkLimitResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StkLimitResponse.ProtoReflect.Descriptor instead.
func (*StkLimitResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{47}
}

func (x *StkLimitResponse) GetList() []*StkLimit {
	if x != nil {
		return x.List
	}
	return nil
}

// 每日停复牌信息
type Suspendd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TsCode        string `protobuf:"bytes,1,opt,name=ts_code,proto3" json:"ts_code,omitempty"`               // TS代码
	TradeDate     string `protobuf:"bytes,2,opt,name=trade_date,proto3" json:"trade_date,omitempty"`         // 停复牌日期
	SuspendTiming string `protobuf:"bytes,3,opt,name=suspend_timing,proto3" json:"suspend_timing,omitempty"` // 日内停牌时间段
	SuspendType   string `protobuf:"bytes,4,opt,name=suspend_type,proto3" json:"suspend_type,omitempty"`     // 停复牌类型：S-停牌，R-复牌
}

func (x *Suspendd) Reset() {
	*x = Suspendd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Suspendd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Suspendd) ProtoMessage() {}

func (x *Suspendd) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Suspendd.ProtoReflect.Descriptor instead.
func (*Suspendd) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{48}
}

func (x *Suspendd) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *Suspendd) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *Suspendd) GetSuspendTiming() string {
	if x != nil {
		return x.SuspendTiming
	}
	return ""
}

func (x *Suspendd) GetSuspendType() string {
	if x != nil {
		return x.SuspendType
	}
	return ""
}

type SuspenddRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit       string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset      string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields      []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	TsCode      string   `protobuf:"bytes,4,opt,name=ts_code,proto3" json:"ts_code,omitempty"`           // 股票代码(可输入多值)
	TradeDate   string   `protobuf:"bytes,5,opt,name=trade_date,proto3" json:"trade_date,omitempty"`     // 交易日日期
	StartDate   string   `protobuf:"bytes,6,opt,name=start_date,proto3" json:"start_date,omitempty"`     // 停复牌查询开始日期
	EndDate     string   `protobuf:"bytes,7,opt,name=end_date,proto3" json:"end_date,omitempty"`         // 停复牌查询结束日期
	SuspendType string   `protobuf:"bytes,8,opt,name=suspend_type,proto3" json:"suspend_type,omitempty"` // 停复牌类型：S-停牌,R-复牌
}

func (x *SuspenddRequest) Reset() {
	*x = SuspenddRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspenddRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspenddRequest) ProtoMessage() {}

func (x *SuspenddRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspenddRequest.ProtoReflect.Descriptor instead.
func (*SuspenddRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{49}
}

func (x *SuspenddRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *SuspenddRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *SuspenddRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *SuspenddRequest) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *SuspenddRequest) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *SuspenddRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *SuspenddRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *SuspenddRequest) GetSuspendType() string {
	if x != nil {
		return x.SuspendType
	}
	return ""
}

type SuspenddResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*Suspendd `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *SuspenddResponse) Reset() {
	*x = SuspenddResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SuspenddResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SuspenddResponse) ProtoMessage() {}

func (x *SuspenddResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SuspenddResponse.ProtoReflect.Descriptor instead.
func (*SuspenddResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{50}
}

func (x *SuspenddResponse) GetList() []*Suspendd {
	if x != nil {
		return x.List
	}
	return nil
}

// 沪深港通资金流向
type MoneyFlowHsgt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeDate  string  `protobuf:"bytes,1,opt,name=trade_date,proto3" json:"trade_date,omitempty"`     // 交易日期
	GgtSs      float32 `protobuf:"fixed32,2,opt,name=ggt_ss,proto3" json:"ggt_ss,omitempty"`           // 港股通（上海）
	GgtSz      float32 `protobuf:"fixed32,3,opt,name=ggt_sz,proto3" json:"ggt_sz,omitempty"`           // 港股通（深圳）
	Hgt        float32 `protobuf:"fixed32,4,opt,name=hgt,proto3" json:"hgt,omitempty"`                 // 沪股通（百万元）
	Sgt        float32 `protobuf:"fixed32,5,opt,name=sgt,proto3" json:"sgt,omitempty"`                 // 深股通（百万元）
	NorthMoney float32 `protobuf:"fixed32,6,opt,name=north_money,proto3" json:"north_money,omitempty"` // 北向资金（百万元）
	SouthMoney float32 `protobuf:"fixed32,7,opt,name=south_money,proto3" json:"south_money,omitempty"` // 南向资金（百万元）
}

func (x *MoneyFlowHsgt) Reset() {
	*x = MoneyFlowHsgt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyFlowHsgt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyFlowHsgt) ProtoMessage() {}

func (x *MoneyFlowHsgt) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyFlowHsgt.ProtoReflect.Descriptor instead.
func (*MoneyFlowHsgt) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{51}
}

func (x *MoneyFlowHsgt) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *MoneyFlowHsgt) GetGgtSs() float32 {
	if x != nil {
		return x.GgtSs
	}
	return 0
}

func (x *MoneyFlowHsgt) GetGgtSz() float32 {
	if x != nil {
		return x.GgtSz
	}
	return 0
}

func (x *MoneyFlowHsgt) GetHgt() float32 {
	if x != nil {
		return x.Hgt
	}
	return 0
}

func (x *MoneyFlowHsgt) GetSgt() float32 {
	if x != nil {
		return x.Sgt
	}
	return 0
}

func (x *MoneyFlowHsgt) GetNorthMoney() float32 {
	if x != nil {
		return x.NorthMoney
	}
	return 0
}

func (x *MoneyFlowHsgt) GetSouthMoney() float32 {
	if x != nil {
		return x.SouthMoney
	}
	return 0
}

type MoneyFlowHsgtRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields    []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	TradeDate string   `protobuf:"bytes,4,opt,name=trade_date,proto3" json:"trade_date,omitempty"` // 交易日期 (二选一)
	StartDate string   `protobuf:"bytes,5,opt,name=start_date,proto3" json:"start_date,omitempty"` // 开始日期 (二选一)
	EndDate   string   `protobuf:"bytes,6,opt,name=end_date,proto3" json:"end_date,omitempty"`     // 结束日期
}

func (x *MoneyFlowHsgtRequest) Reset() {
	*x = MoneyFlowHsgtRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyFlowHsgtRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyFlowHsgtRequest) ProtoMessage() {}

func (x *MoneyFlowHsgtRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyFlowHsgtRequest.ProtoReflect.Descriptor instead.
func (*MoneyFlowHsgtRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{52}
}

func (x *MoneyFlowHsgtRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *MoneyFlowHsgtRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *MoneyFlowHsgtRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *MoneyFlowHsgtRequest) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *MoneyFlowHsgtRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *MoneyFlowHsgtRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type MoneyFlowHsgtResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*MoneyFlowHsgt `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *MoneyFlowHsgtResponse) Reset() {
	*x = MoneyFlowHsgtResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MoneyFlowHsgtResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MoneyFlowHsgtResponse) ProtoMessage() {}

func (x *MoneyFlowHsgtResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MoneyFlowHsgtResponse.ProtoReflect.Descriptor instead.
func (*MoneyFlowHsgtResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{53}
}

func (x *MoneyFlowHsgtResponse) GetList() []*MoneyFlowHsgt {
	if x != nil {
		return x.List
	}
	return nil
}

// 沪深股通十大成交股
type HsgtTop10 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeDate  string  `protobuf:"bytes,1,opt,name=trade_date,proto3" json:"trade_date,omitempty"`    //交易日期
	TsCode     string  `protobuf:"bytes,2,opt,name=ts_code,proto3" json:"ts_code,omitempty"`          //股票代码
	Name       string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                //股票名称
	Close      float32 `protobuf:"fixed32,4,opt,name=close,proto3" json:"close,omitempty"`            //收盘价
	Change     float32 `protobuf:"fixed32,5,opt,name=change,proto3" json:"change,omitempty"`          //涨跌额
	Rank       int64   `protobuf:"varint,6,opt,name=rank,proto3" json:"rank,omitempty"`               //资金排名
	MarketType int64   `protobuf:"varint,7,opt,name=market_type,proto3" json:"market_type,omitempty"` //市场类型（1：沪市 3：深市）
	Amount     float32 `protobuf:"fixed32,8,opt,name=amount,proto3" json:"amount,omitempty"`          //成交金额（元）
	NetAmount  float32 `protobuf:"fixed32,9,opt,name=net_amount,proto3" json:"net_amount,omitempty"`  //净成交金额（元）
	Buy        float32 `protobuf:"fixed32,10,opt,name=buy,proto3" json:"buy,omitempty"`               //买入金额（元）
	Sell       float32 `protobuf:"fixed32,11,opt,name=sell,proto3" json:"sell,omitempty"`             //卖出金额（元）
}

func (x *HsgtTop10) Reset() {
	*x = HsgtTop10{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HsgtTop10) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HsgtTop10) ProtoMessage() {}

func (x *HsgtTop10) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HsgtTop10.ProtoReflect.Descriptor instead.
func (*HsgtTop10) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{54}
}

func (x *HsgtTop10) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *HsgtTop10) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *HsgtTop10) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *HsgtTop10) GetClose() float32 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *HsgtTop10) GetChange() float32 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *HsgtTop10) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *HsgtTop10) GetMarketType() int64 {
	if x != nil {
		return x.MarketType
	}
	return 0
}

func (x *HsgtTop10) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *HsgtTop10) GetNetAmount() float32 {
	if x != nil {
		return x.NetAmount
	}
	return 0
}

func (x *HsgtTop10) GetBuy() float32 {
	if x != nil {
		return x.Buy
	}
	return 0
}

func (x *HsgtTop10) GetSell() float32 {
	if x != nil {
		return x.Sell
	}
	return 0
}

type HsgtTop10Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields     []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	TsCode     string   `protobuf:"bytes,4,opt,name=ts_code,proto3" json:"ts_code,omitempty"`         // 股票代码（二选一）
	TradeDate  string   `protobuf:"bytes,5,opt,name=trade_date,proto3" json:"trade_date,omitempty"`   // 交易日期（二选一）
	StartDate  string   `protobuf:"bytes,6,opt,name=start_date,proto3" json:"start_date,omitempty"`   // 开始日期
	EndDate    string   `protobuf:"bytes,7,opt,name=end_date,proto3" json:"end_date,omitempty"`       // 结束日期
	MarketType string   `protobuf:"bytes,8,opt,name=market_type,proto3" json:"market_type,omitempty"` // 市场类型（1：沪市 3：深市）
}

func (x *HsgtTop10Request) Reset() {
	*x = HsgtTop10Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HsgtTop10Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HsgtTop10Request) ProtoMessage() {}

func (x *HsgtTop10Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HsgtTop10Request.ProtoReflect.Descriptor instead.
func (*HsgtTop10Request) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{55}
}

func (x *HsgtTop10Request) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *HsgtTop10Request) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *HsgtTop10Request) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *HsgtTop10Request) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *HsgtTop10Request) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *HsgtTop10Request) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *HsgtTop10Request) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *HsgtTop10Request) GetMarketType() string {
	if x != nil {
		return x.MarketType
	}
	return ""
}

type HsgtTop10Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*HsgtTop10 `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *HsgtTop10Response) Reset() {
	*x = HsgtTop10Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HsgtTop10Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HsgtTop10Response) ProtoMessage() {}

func (x *HsgtTop10Response) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HsgtTop10Response.ProtoReflect.Descriptor instead.
func (*HsgtTop10Response) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{56}
}

func (x *HsgtTop10Response) GetList() []*HsgtTop10 {
	if x != nil {
		return x.List
	}
	return nil
}

// 港股通十大成交股
type GgtTop10 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeDate   string  `protobuf:"bytes,1,opt,name=trade_date,proto3" json:"trade_date,omitempty"`          // 交易日期
	TsCode      string  `protobuf:"bytes,2,opt,name=ts_code,proto3" json:"ts_code,omitempty"`                // 股票代码
	Name        string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                      // 股票名称
	Close       float32 `protobuf:"fixed32,4,opt,name=close,proto3" json:"close,omitempty"`                  // 收盘价
	PChange     float32 `protobuf:"fixed32,5,opt,name=p_change,proto3" json:"p_change,omitempty"`            // 涨跌幅
	Rank        int64   `protobuf:"varint,6,opt,name=rank,proto3" json:"rank,omitempty"`                     // 资金排名
	MarketType  int64   `protobuf:"varint,7,opt,name=market_type,proto3" json:"market_type,omitempty"`       // 市场类型 2：港股通（沪） 4：港股通（深）
	Amount      float32 `protobuf:"fixed32,8,opt,name=amount,proto3" json:"amount,omitempty"`                // 累计成交金额（元）
	NetAmount   float32 `protobuf:"fixed32,9,opt,name=net_amount,proto3" json:"net_amount,omitempty"`        // 净买入金额（元）
	ShAmount    float32 `protobuf:"fixed32,10,opt,name=sh_amount,proto3" json:"sh_amount,omitempty"`         // 沪市成交金额（元）
	ShNetAmount float32 `protobuf:"fixed32,11,opt,name=sh_net_amount,proto3" json:"sh_net_amount,omitempty"` // 沪市净买入金额（元）
	ShBuy       float32 `protobuf:"fixed32,12,opt,name=sh_buy,proto3" json:"sh_buy,omitempty"`               // 沪市买入金额（元）
	ShSell      float32 `protobuf:"fixed32,13,opt,name=sh_sell,proto3" json:"sh_sell,omitempty"`             // 沪市卖出金额
	SzAmount    float32 `protobuf:"fixed32,14,opt,name=sz_amount,proto3" json:"sz_amount,omitempty"`         // 深市成交金额（元）
	SzNetAmount float32 `protobuf:"fixed32,15,opt,name=sz_net_amount,proto3" json:"sz_net_amount,omitempty"` // 深市净买入金额（元）
	SzBuy       float32 `protobuf:"fixed32,16,opt,name=sz_buy,proto3" json:"sz_buy,omitempty"`               // 深市买入金额（元）
	SzSell      float32 `protobuf:"fixed32,17,opt,name=sz_sell,proto3" json:"sz_sell,omitempty"`             // 深市卖出金额（元）
}

func (x *GgtTop10) Reset() {
	*x = GgtTop10{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GgtTop10) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GgtTop10) ProtoMessage() {}

func (x *GgtTop10) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GgtTop10.ProtoReflect.Descriptor instead.
func (*GgtTop10) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{57}
}

func (x *GgtTop10) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *GgtTop10) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *GgtTop10) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GgtTop10) GetClose() float32 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *GgtTop10) GetPChange() float32 {
	if x != nil {
		return x.PChange
	}
	return 0
}

func (x *GgtTop10) GetRank() int64 {
	if x != nil {
		return x.Rank
	}
	return 0
}

func (x *GgtTop10) GetMarketType() int64 {
	if x != nil {
		return x.MarketType
	}
	return 0
}

func (x *GgtTop10) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *GgtTop10) GetNetAmount() float32 {
	if x != nil {
		return x.NetAmount
	}
	return 0
}

func (x *GgtTop10) GetShAmount() float32 {
	if x != nil {
		return x.ShAmount
	}
	return 0
}

func (x *GgtTop10) GetShNetAmount() float32 {
	if x != nil {
		return x.ShNetAmount
	}
	return 0
}

func (x *GgtTop10) GetShBuy() float32 {
	if x != nil {
		return x.ShBuy
	}
	return 0
}

func (x *GgtTop10) GetShSell() float32 {
	if x != nil {
		return x.ShSell
	}
	return 0
}

func (x *GgtTop10) GetSzAmount() float32 {
	if x != nil {
		return x.SzAmount
	}
	return 0
}

func (x *GgtTop10) GetSzNetAmount() float32 {
	if x != nil {
		return x.SzNetAmount
	}
	return 0
}

func (x *GgtTop10) GetSzBuy() float32 {
	if x != nil {
		return x.SzBuy
	}
	return 0
}

func (x *GgtTop10) GetSzSell() float32 {
	if x != nil {
		return x.SzSell
	}
	return 0
}

type GgtTop10Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields     []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	TsCode     string   `protobuf:"bytes,4,opt,name=ts_code,proto3" json:"ts_code,omitempty"`         // 股票代码（二选一）
	TradeDate  string   `protobuf:"bytes,5,opt,name=trade_date,proto3" json:"trade_date,omitempty"`   // 交易日期（二选一）
	StartDate  string   `protobuf:"bytes,6,opt,name=start_date,proto3" json:"start_date,omitempty"`   // 开始日期
	EndDate    string   `protobuf:"bytes,7,opt,name=end_date,proto3" json:"end_date,omitempty"`       // 结束日期
	MarketType string   `protobuf:"bytes,8,opt,name=market_type,proto3" json:"market_type,omitempty"` // 市场类型 2：港股通（沪） 4：港股通（深）
}

func (x *GgtTop10Request) Reset() {
	*x = GgtTop10Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GgtTop10Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GgtTop10Request) ProtoMessage() {}

func (x *GgtTop10Request) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GgtTop10Request.ProtoReflect.Descriptor instead.
func (*GgtTop10Request) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{58}
}

func (x *GgtTop10Request) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GgtTop10Request) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *GgtTop10Request) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *GgtTop10Request) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *GgtTop10Request) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *GgtTop10Request) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GgtTop10Request) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

func (x *GgtTop10Request) GetMarketType() string {
	if x != nil {
		return x.MarketType
	}
	return ""
}

type GgtTop10Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GgtTop10 `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GgtTop10Response) Reset() {
	*x = GgtTop10Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GgtTop10Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GgtTop10Response) ProtoMessage() {}

func (x *GgtTop10Response) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GgtTop10Response.ProtoReflect.Descriptor instead.
func (*GgtTop10Response) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{59}
}

func (x *GgtTop10Response) GetList() []*GgtTop10 {
	if x != nil {
		return x.List
	}
	return nil
}

// 港股通每日成交统计
type GgtDaily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TradeDate  string  `protobuf:"bytes,1,opt,name=trade_date,proto3" json:"trade_date,omitempty"`     // 交易日期
	BuyAmount  float32 `protobuf:"fixed32,2,opt,name=buy_amount,proto3" json:"buy_amount,omitempty"`   // 买入成交金额（亿元）
	BuyVolume  float32 `protobuf:"fixed32,3,opt,name=buy_volume,proto3" json:"buy_volume,omitempty"`   // 买入成交笔数（万笔）
	SellAmount float32 `protobuf:"fixed32,4,opt,name=sell_amount,proto3" json:"sell_amount,omitempty"` // 卖出成交金额（亿元）
	SellVolume float32 `protobuf:"fixed32,5,opt,name=sell_volume,proto3" json:"sell_volume,omitempty"` // 卖出成交笔数（万笔）
}

func (x *GgtDaily) Reset() {
	*x = GgtDaily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GgtDaily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GgtDaily) ProtoMessage() {}

func (x *GgtDaily) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GgtDaily.ProtoReflect.Descriptor instead.
func (*GgtDaily) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{60}
}

func (x *GgtDaily) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *GgtDaily) GetBuyAmount() float32 {
	if x != nil {
		return x.BuyAmount
	}
	return 0
}

func (x *GgtDaily) GetBuyVolume() float32 {
	if x != nil {
		return x.BuyVolume
	}
	return 0
}

func (x *GgtDaily) GetSellAmount() float32 {
	if x != nil {
		return x.SellAmount
	}
	return 0
}

func (x *GgtDaily) GetSellVolume() float32 {
	if x != nil {
		return x.SellVolume
	}
	return 0
}

type GgtDailyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields    []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	TradeDate string   `protobuf:"bytes,4,opt,name=trade_date,proto3" json:"trade_date,omitempty"` // 交易日期 （格式YYYYMMDD，下同。支持单日和多日输入）
	StartDate string   `protobuf:"bytes,5,opt,name=start_date,proto3" json:"start_date,omitempty"` // 开始日期
	EndDate   string   `protobuf:"bytes,6,opt,name=end_date,proto3" json:"end_date,omitempty"`     // 结束日期
}

func (x *GgtDailyRequest) Reset() {
	*x = GgtDailyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GgtDailyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GgtDailyRequest) ProtoMessage() {}

func (x *GgtDailyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GgtDailyRequest.ProtoReflect.Descriptor instead.
func (*GgtDailyRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{61}
}

func (x *GgtDailyRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GgtDailyRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *GgtDailyRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *GgtDailyRequest) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *GgtDailyRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *GgtDailyRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type GgtDailyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GgtDaily `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GgtDailyResponse) Reset() {
	*x = GgtDailyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GgtDailyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GgtDailyResponse) ProtoMessage() {}

func (x *GgtDailyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GgtDailyResponse.ProtoReflect.Descriptor instead.
func (*GgtDailyResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{62}
}

func (x *GgtDailyResponse) GetList() []*GgtDaily {
	if x != nil {
		return x.List
	}
	return nil
}

// 港股通每月成交统计
type GgtMonthly struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Month        string  `protobuf:"bytes,1,opt,name=month,proto3" json:"month,omitempty"`                     //	交易日期
	DayBuyAmt    float32 `protobuf:"fixed32,2,opt,name=day_buy_amt,proto3" json:"day_buy_amt,omitempty"`       //	当月日均买入成交金额（亿元）
	DayBuyVol    float32 `protobuf:"fixed32,3,opt,name=day_buy_vol,proto3" json:"day_buy_vol,omitempty"`       //	当月日均买入成交笔数（万笔）
	DaySellAmt   float32 `protobuf:"fixed32,4,opt,name=day_sell_amt,proto3" json:"day_sell_amt,omitempty"`     //	当月日均卖出成交金额（亿元）
	DaySellVol   float32 `protobuf:"fixed32,5,opt,name=day_sell_vol,proto3" json:"day_sell_vol,omitempty"`     //	当月日均卖出成交笔数（万笔）
	TotalBuyAmt  float32 `protobuf:"fixed32,6,opt,name=total_buy_amt,proto3" json:"total_buy_amt,omitempty"`   //	总买入成交金额（亿元）
	TotalBuyVol  float32 `protobuf:"fixed32,7,opt,name=total_buy_vol,proto3" json:"total_buy_vol,omitempty"`   //	总买入成交笔数（万笔）
	TotalSellAmt float32 `protobuf:"fixed32,8,opt,name=total_sell_amt,proto3" json:"total_sell_amt,omitempty"` //	总卖出成交金额（亿元）
	TotalSellVol float32 `protobuf:"fixed32,9,opt,name=total_sell_vol,proto3" json:"total_sell_vol,omitempty"` //	总卖出成交笔数（万笔）
}

func (x *GgtMonthly) Reset() {
	*x = GgtMonthly{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GgtMonthly) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GgtMonthly) ProtoMessage() {}

func (x *GgtMonthly) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GgtMonthly.ProtoReflect.Descriptor instead.
func (*GgtMonthly) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{63}
}

func (x *GgtMonthly) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *GgtMonthly) GetDayBuyAmt() float32 {
	if x != nil {
		return x.DayBuyAmt
	}
	return 0
}

func (x *GgtMonthly) GetDayBuyVol() float32 {
	if x != nil {
		return x.DayBuyVol
	}
	return 0
}

func (x *GgtMonthly) GetDaySellAmt() float32 {
	if x != nil {
		return x.DaySellAmt
	}
	return 0
}

func (x *GgtMonthly) GetDaySellVol() float32 {
	if x != nil {
		return x.DaySellVol
	}
	return 0
}

func (x *GgtMonthly) GetTotalBuyAmt() float32 {
	if x != nil {
		return x.TotalBuyAmt
	}
	return 0
}

func (x *GgtMonthly) GetTotalBuyVol() float32 {
	if x != nil {
		return x.TotalBuyVol
	}
	return 0
}

func (x *GgtMonthly) GetTotalSellAmt() float32 {
	if x != nil {
		return x.TotalSellAmt
	}
	return 0
}

func (x *GgtMonthly) GetTotalSellVol() float32 {
	if x != nil {
		return x.TotalSellVol
	}
	return 0
}

type GgtMonthlyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit      string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset     string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields     []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	Month      string   `protobuf:"bytes,4,opt,name=month,proto3" json:"month,omitempty"`             // 月度（格式YYYYMM，下同，支持多个输入）
	StartMonth string   `protobuf:"bytes,5,opt,name=start_month,proto3" json:"start_month,omitempty"` // 开始月度
	EndMonth   string   `protobuf:"bytes,6,opt,name=end_month,proto3" json:"end_month,omitempty"`     // 结束月度
}

func (x *GgtMonthlyRequest) Reset() {
	*x = GgtMonthlyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GgtMonthlyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GgtMonthlyRequest) ProtoMessage() {}

func (x *GgtMonthlyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GgtMonthlyRequest.ProtoReflect.Descriptor instead.
func (*GgtMonthlyRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{64}
}

func (x *GgtMonthlyRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *GgtMonthlyRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *GgtMonthlyRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *GgtMonthlyRequest) GetMonth() string {
	if x != nil {
		return x.Month
	}
	return ""
}

func (x *GgtMonthlyRequest) GetStartMonth() string {
	if x != nil {
		return x.StartMonth
	}
	return ""
}

func (x *GgtMonthlyRequest) GetEndMonth() string {
	if x != nil {
		return x.EndMonth
	}
	return ""
}

type GgtMonthlyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*GgtMonthly `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *GgtMonthlyResponse) Reset() {
	*x = GgtMonthlyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GgtMonthlyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GgtMonthlyResponse) ProtoMessage() {}

func (x *GgtMonthlyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GgtMonthlyResponse.ProtoReflect.Descriptor instead.
func (*GgtMonthlyResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{65}
}

func (x *GgtMonthlyResponse) GetList() []*GgtMonthly {
	if x != nil {
		return x.List
	}
	return nil
}

// 备用行情
type BakDaily struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TsCode      string  `protobuf:"bytes,1,opt,name=ts_code,proto3" json:"ts_code,omitempty"`              // 股票代码
	TradeDate   string  `protobuf:"bytes,2,opt,name=trade_date,proto3" json:"trade_date,omitempty"`        // 交易日期
	Name        string  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`                    // 股票名称
	PctChange   float32 `protobuf:"fixed32,4,opt,name=pct_change,proto3" json:"pct_change,omitempty"`      // 涨跌幅
	Close       float32 `protobuf:"fixed32,5,opt,name=close,proto3" json:"close,omitempty"`                // 收盘价
	Change      float32 `protobuf:"fixed32,6,opt,name=change,proto3" json:"change,omitempty"`              // 涨跌额
	Open        float32 `protobuf:"fixed32,7,opt,name=open,proto3" json:"open,omitempty"`                  // 开盘价
	High        float32 `protobuf:"fixed32,8,opt,name=high,proto3" json:"high,omitempty"`                  // 最高价
	Low         float32 `protobuf:"fixed32,9,opt,name=low,proto3" json:"low,omitempty"`                    // 最低价
	PreClose    float32 `protobuf:"fixed32,10,opt,name=pre_close,proto3" json:"pre_close,omitempty"`       // 昨收价
	VolRatio    float32 `protobuf:"fixed32,11,opt,name=vol_ratio,proto3" json:"vol_ratio,omitempty"`       // 量比
	TurnOver    float32 `protobuf:"fixed32,12,opt,name=turn_over,proto3" json:"turn_over,omitempty"`       // 换手率
	Swing       float32 `protobuf:"fixed32,13,opt,name=swing,proto3" json:"swing,omitempty"`               // 振幅
	Vol         float32 `protobuf:"fixed32,14,opt,name=vol,proto3" json:"vol,omitempty"`                   // 成交量
	Amount      float32 `protobuf:"fixed32,15,opt,name=amount,proto3" json:"amount,omitempty"`             // 成交额
	Selling     float32 `protobuf:"fixed32,16,opt,name=selling,proto3" json:"selling,omitempty"`           // 内盘（主动卖，手）
	Buying      float32 `protobuf:"fixed32,17,opt,name=buying,proto3" json:"buying,omitempty"`             // 外盘（主动买， 手）
	TotalShare  float32 `protobuf:"fixed32,18,opt,name=total_share,proto3" json:"total_share,omitempty"`   // 总股本(亿)
	FloatShare  float32 `protobuf:"fixed32,19,opt,name=float_share,proto3" json:"float_share,omitempty"`   // 流通股本(亿)
	Pe          float32 `protobuf:"fixed32,20,opt,name=pe,proto3" json:"pe,omitempty"`                     // 市盈(动)
	Industry    string  `protobuf:"bytes,21,opt,name=industry,proto3" json:"industry,omitempty"`           // 所属行业
	Area        string  `protobuf:"bytes,22,opt,name=area,proto3" json:"area,omitempty"`                   // 所属地域
	FloatMv     float32 `protobuf:"fixed32,23,opt,name=float_mv,proto3" json:"float_mv,omitempty"`         // 流通市值
	TotalMv     float32 `protobuf:"fixed32,24,opt,name=total_mv,proto3" json:"total_mv,omitempty"`         // 总市值
	AvgPrice    float32 `protobuf:"fixed32,25,opt,name=avg_price,proto3" json:"avg_price,omitempty"`       // 平均价
	Strength    float32 `protobuf:"fixed32,26,opt,name=strength,proto3" json:"strength,omitempty"`         // 强弱度(%)
	Activity    float32 `protobuf:"fixed32,27,opt,name=activity,proto3" json:"activity,omitempty"`         // 活跃度(%)
	AvgTurnover float32 `protobuf:"fixed32,28,opt,name=avg_turnover,proto3" json:"avg_turnover,omitempty"` // 笔换手
	Attack      float32 `protobuf:"fixed32,29,opt,name=attack,proto3" json:"attack,omitempty"`             // 攻击波(%)
	Interval_3  float32 `protobuf:"fixed32,30,opt,name=interval_3,proto3" json:"interval_3,omitempty"`     // 近3月涨幅
	Interval_6  float32 `protobuf:"fixed32,31,opt,name=interval_6,proto3" json:"interval_6,omitempty"`     // 近6月涨幅
}

func (x *BakDaily) Reset() {
	*x = BakDaily{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakDaily) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakDaily) ProtoMessage() {}

func (x *BakDaily) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakDaily.ProtoReflect.Descriptor instead.
func (*BakDaily) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{66}
}

func (x *BakDaily) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *BakDaily) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *BakDaily) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BakDaily) GetPctChange() float32 {
	if x != nil {
		return x.PctChange
	}
	return 0
}

func (x *BakDaily) GetClose() float32 {
	if x != nil {
		return x.Close
	}
	return 0
}

func (x *BakDaily) GetChange() float32 {
	if x != nil {
		return x.Change
	}
	return 0
}

func (x *BakDaily) GetOpen() float32 {
	if x != nil {
		return x.Open
	}
	return 0
}

func (x *BakDaily) GetHigh() float32 {
	if x != nil {
		return x.High
	}
	return 0
}

func (x *BakDaily) GetLow() float32 {
	if x != nil {
		return x.Low
	}
	return 0
}

func (x *BakDaily) GetPreClose() float32 {
	if x != nil {
		return x.PreClose
	}
	return 0
}

func (x *BakDaily) GetVolRatio() float32 {
	if x != nil {
		return x.VolRatio
	}
	return 0
}

func (x *BakDaily) GetTurnOver() float32 {
	if x != nil {
		return x.TurnOver
	}
	return 0
}

func (x *BakDaily) GetSwing() float32 {
	if x != nil {
		return x.Swing
	}
	return 0
}

func (x *BakDaily) GetVol() float32 {
	if x != nil {
		return x.Vol
	}
	return 0
}

func (x *BakDaily) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BakDaily) GetSelling() float32 {
	if x != nil {
		return x.Selling
	}
	return 0
}

func (x *BakDaily) GetBuying() float32 {
	if x != nil {
		return x.Buying
	}
	return 0
}

func (x *BakDaily) GetTotalShare() float32 {
	if x != nil {
		return x.TotalShare
	}
	return 0
}

func (x *BakDaily) GetFloatShare() float32 {
	if x != nil {
		return x.FloatShare
	}
	return 0
}

func (x *BakDaily) GetPe() float32 {
	if x != nil {
		return x.Pe
	}
	return 0
}

func (x *BakDaily) GetIndustry() string {
	if x != nil {
		return x.Industry
	}
	return ""
}

func (x *BakDaily) GetArea() string {
	if x != nil {
		return x.Area
	}
	return ""
}

func (x *BakDaily) GetFloatMv() float32 {
	if x != nil {
		return x.FloatMv
	}
	return 0
}

func (x *BakDaily) GetTotalMv() float32 {
	if x != nil {
		return x.TotalMv
	}
	return 0
}

func (x *BakDaily) GetAvgPrice() float32 {
	if x != nil {
		return x.AvgPrice
	}
	return 0
}

func (x *BakDaily) GetStrength() float32 {
	if x != nil {
		return x.Strength
	}
	return 0
}

func (x *BakDaily) GetActivity() float32 {
	if x != nil {
		return x.Activity
	}
	return 0
}

func (x *BakDaily) GetAvgTurnover() float32 {
	if x != nil {
		return x.AvgTurnover
	}
	return 0
}

func (x *BakDaily) GetAttack() float32 {
	if x != nil {
		return x.Attack
	}
	return 0
}

func (x *BakDaily) GetInterval_3() float32 {
	if x != nil {
		return x.Interval_3
	}
	return 0
}

func (x *BakDaily) GetInterval_6() float32 {
	if x != nil {
		return x.Interval_6
	}
	return 0
}

type BakDailyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Limit     string   `protobuf:"bytes,1,opt,name=limit,proto3" json:"limit,omitempty"`
	Offset    string   `protobuf:"bytes,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Fields    []string `protobuf:"bytes,3,rep,name=fields,proto3" json:"fields,omitempty"`
	TsCode    string   `protobuf:"bytes,4,opt,name=ts_code,proto3" json:"ts_code,omitempty"`       // 股票代码
	TradeDate string   `protobuf:"bytes,5,opt,name=trade_date,proto3" json:"trade_date,omitempty"` // 交易日期
	StartDate string   `protobuf:"bytes,6,opt,name=start_date,proto3" json:"start_date,omitempty"` // 开始日期
	EndDate   string   `protobuf:"bytes,7,opt,name=end_date,proto3" json:"end_date,omitempty"`     // 结束日期
}

func (x *BakDailyRequest) Reset() {
	*x = BakDailyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakDailyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakDailyRequest) ProtoMessage() {}

func (x *BakDailyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakDailyRequest.ProtoReflect.Descriptor instead.
func (*BakDailyRequest) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{67}
}

func (x *BakDailyRequest) GetLimit() string {
	if x != nil {
		return x.Limit
	}
	return ""
}

func (x *BakDailyRequest) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *BakDailyRequest) GetFields() []string {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *BakDailyRequest) GetTsCode() string {
	if x != nil {
		return x.TsCode
	}
	return ""
}

func (x *BakDailyRequest) GetTradeDate() string {
	if x != nil {
		return x.TradeDate
	}
	return ""
}

func (x *BakDailyRequest) GetStartDate() string {
	if x != nil {
		return x.StartDate
	}
	return ""
}

func (x *BakDailyRequest) GetEndDate() string {
	if x != nil {
		return x.EndDate
	}
	return ""
}

type BakDailyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List []*BakDaily `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
}

func (x *BakDailyResponse) Reset() {
	*x = BakDailyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_api_v1_stock_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BakDailyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BakDailyResponse) ProtoMessage() {}

func (x *BakDailyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_api_v1_stock_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BakDailyResponse.ProtoReflect.Descriptor instead.
func (*BakDailyResponse) Descriptor() ([]byte, []int) {
	return file_api_v1_stock_proto_rawDescGZIP(), []int{68}
}

func (x *BakDailyResponse) GetList() []*BakDaily {
	if x != nil {
		return x.List
	}
	return nil
}

var File_api_v1_stock_proto protoreflect.FileDescriptor

var file_api_v1_stock_proto_rawDesc = []byte{
	0x0a, 0x12, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x22, 0xda, 0x03, 0x0a,
	0x0a, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73, 0x74, 0x72,
	0x79, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x75, 0x6c, 0x6c, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x65, 0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x65,
	0x6e, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x6c, 0x6c,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6e, 0x73, 0x70, 0x65, 0x6c, 0x6c, 0x12,
	0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x75, 0x72, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x5f, 0x68, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x69, 0x73, 0x5f, 0x68, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x63, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x5f, 0x65, 0x6e, 0x74,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x63, 0x74,
	0x5f, 0x65, 0x6e, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0xf3, 0x01, 0x0a, 0x11, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6c,
	0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a,
	0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x5f,
	0x68, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x69, 0x73, 0x5f, 0x68, 0x73, 0x22,
	0x3c, 0x0a, 0x12, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x82, 0x01,
	0x0a, 0x08, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78,
	0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x24, 0x0a, 0x0d,
	0x70, 0x72, 0x65, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x70, 0x72, 0x65, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x22, 0xe5, 0x01, 0x0a, 0x0f, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6c, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x61, 0x6c, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0x38, 0x0a, 0x10, 0x54, 0x72,
	0x61, 0x64, 0x65, 0x43, 0x61, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x64, 0x65, 0x43, 0x61, 0x6c, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xb8, 0x01, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x6e, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x6e, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22,
	0xaf, 0x01, 0x0a, 0x11, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x22, 0x3c, 0x0a, 0x12, 0x4e, 0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x8b, 0x01, 0x0a, 0x07, 0x48, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x75, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6f, 0x75, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x22, 0xa2, 0x01,
	0x0a, 0x0e, 0x48, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x68, 0x73, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x69, 0x73, 0x5f, 0x6e, 0x65, 0x77, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x22, 0x36, 0x0a, 0x0f, 0x48, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x73, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe2, 0x03, 0x0a, 0x0c, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x73,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x72, 0x6d, 0x61, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x68, 0x61, 0x69, 0x72, 0x6d, 0x61, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x61, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x61, 0x72, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x67, 0x5f, 0x63, 0x61, 0x70,
	0x69, 0x74, 0x61, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x72, 0x65, 0x67, 0x5f,
	0x63, 0x61, 0x70, 0x69, 0x74, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x75, 0x70,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x74,
	0x75, 0x70, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69,
	0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x74, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x69,
	0x6e, 0x74, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x77,
	0x65, 0x62, 0x73, 0x69, 0x74, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x77, 0x65,
	0x62, 0x73, 0x69, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6f,
	0x66, 0x66, 0x69, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66,
	0x69, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x65, 0x6d, 0x70, 0x6c, 0x6f, 0x79, 0x65, 0x65,
	0x73, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65,
	0x73, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x62,
	0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e,
	0x65, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x22,
	0xa9, 0x01, 0x0a, 0x13, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x40, 0x0a, 0x14, 0x53,
	0x74, 0x6f, 0x63, 0x6b, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x6e, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xb5, 0x02,
	0x0a, 0x0b, 0x53, 0x74, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6e, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x6e, 0x6e, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x65, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6c, 0x65,
	0x76, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x64, 0x75, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x65, 0x64, 0x75, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x1a, 0x0a, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x65, 0x67, 0x69, 0x6e, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6d, 0x65, 0x22, 0xcc, 0x01, 0x0a, 0x12, 0x53, 0x74, 0x6b, 0x4d, 0x61, 0x6e,
	0x61, 0x67, 0x65, 0x72, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x6e, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x61, 0x6e, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x22, 0x3e, 0x0a, 0x13, 0x53, 0x74, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x72, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x6b, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x73, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0xbc, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x6b, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x61, 0x6e, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x61, 0x6e, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x72, 0x65, 0x77, 0x61, 0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x76, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x68, 0x6f, 0x6c, 0x64, 0x5f,
	0x76, 0x6f, 0x6c, 0x22, 0x8f, 0x01, 0x0a, 0x11, 0x53, 0x74, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72,
	0x64, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0x3c, 0x0a, 0x12, 0x53, 0x74, 0x6b, 0x52, 0x65, 0x77, 0x61,
	0x72, 0x64, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x74, 0x6b, 0x52, 0x65, 0x77, 0x61, 0x72, 0x64, 0x73, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0xc6, 0x02, 0x0a, 0x08, 0x4e, 0x65, 0x77, 0x53, 0x68, 0x61, 0x72, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x75,
	0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x75,
	0x62, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x70,
	0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x70,
	0x6f, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x73, 0x75, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x69, 0x73, 0x73, 0x75,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x65,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0c, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x66, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x66,
	0x75, 0x6e, 0x64, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x62, 0x61, 0x6c, 0x6c, 0x6f, 0x74, 0x22, 0x93, 0x01, 0x0a,
	0x0f, 0x4e, 0x65, 0x77, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x38, 0x0a, 0x10, 0x4e, 0x65, 0x77, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x65,
	0x77, 0x53, 0x68, 0x61, 0x72, 0x65, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x96, 0x05, 0x0a,
	0x08, 0x42, 0x61, 0x6b, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73,
	0x74, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x64, 0x75, 0x73,
	0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x02, 0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61, 0x74,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12,
	0x24, 0x0a, 0x0d, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6c, 0x69, 0x71, 0x75, 0x69, 0x64, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x66, 0x69, 0x78, 0x65, 0x64, 0x5f, 0x61,
	0x73, 0x73, 0x65, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x66, 0x69, 0x78,
	0x65, 0x64, 0x5f, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x64, 0x12, 0x2c, 0x0a, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x64, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x11, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x64, 0x5f, 0x70, 0x65, 0x72, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x70, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x03, 0x65, 0x70, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x62, 0x76, 0x70, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x62, 0x76, 0x70, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x62, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x70, 0x62, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x73,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6c, 0x69,
	0x73, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x6e, 0x64, 0x70, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x75, 0x6e, 0x64, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x65, 0x72, 0x5f, 0x75, 0x6e, 0x64, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70,
	0x65, 0x72, 0x5f, 0x75, 0x6e, 0x64, 0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x76, 0x5f, 0x79,
	0x6f, 0x79, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x72, 0x65, 0x76, 0x5f, 0x79, 0x6f,
	0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x79, 0x6f, 0x79, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x74, 0x5f, 0x79, 0x6f,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x67, 0x70, 0x72, 0x18, 0x16, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x67, 0x70, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x70, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x03, 0x6e, 0x70, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x5f,
	0x6e, 0x75, 0x6d, 0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x5f, 0x6e, 0x75, 0x6d, 0x22, 0x91, 0x01, 0x0a, 0x0f, 0x42, 0x61, 0x6b, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x38, 0x0a, 0x10, 0x42, 0x61, 0x6b,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x6b, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x22, 0x8b, 0x02, 0x0a, 0x05, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68,
	0x69, 0x67, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12,
	0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x6f,
	0x77, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x72, 0x65, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x70, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6f, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x76, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xca, 0x01, 0x0a, 0x0c, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0x32,
	0x0a, 0x0d, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x21, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x22, 0x8c, 0x02, 0x0a, 0x06, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x6f, 0x70, 0x65,
	0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x5f, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70, 0x72, 0x65, 0x5f,
	0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x70, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x70, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6f, 0x6c, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x76, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x22, 0xcb, 0x01, 0x0a, 0x0d, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22,
	0x34, 0x0a, 0x0e, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x22, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0e, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x65, 0x65, 0x6b, 0x6c, 0x79, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x8d, 0x02, 0x0a, 0x07, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x04, 0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x70, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x76,
	0x6f, 0x6c, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x76, 0x6f, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xcc, 0x01, 0x0a, 0x0e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x22, 0x36, 0x0a, 0x0f, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x65, 0x0a, 0x09,
	0x41, 0x64, 0x6a, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f,
	0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x73, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x61, 0x64, 0x6a, 0x5f, 0x66, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x61, 0x64, 0x6a, 0x5f, 0x66, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x22, 0xce, 0x01, 0x0a, 0x10, 0x41, 0x64, 0x6a, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x0a, 0x11, 0x41, 0x64, 0x6a, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x64, 0x6a, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xfe, 0x03, 0x0a, 0x0a, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x61, 0x73, 0x69, 0x63, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f,
	0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72,
	0x5f, 0x72, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65,
	0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0f,
	0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x5f, 0x66, 0x12,
	0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x5f, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x02, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x65, 0x5f, 0x74, 0x74, 0x6d, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x65, 0x5f, 0x74, 0x74, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x70,
	0x62, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x70, 0x62, 0x12, 0x0e, 0x0a, 0x02, 0x70,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x70,
	0x73, 0x5f, 0x74, 0x74, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x70, 0x73, 0x5f,
	0x74, 0x74, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x76, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x64, 0x76, 0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x76, 0x5f, 0x74, 0x74, 0x6d, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x06, 0x64, 0x76, 0x5f, 0x74, 0x74, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x6f,
	0x61, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x66, 0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x66,
	0x72, 0x65, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0a, 0x66, 0x72, 0x65, 0x65, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x76, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6d, 0x76, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x69, 0x72, 0x63, 0x5f,
	0x6d, 0x76, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x69, 0x72, 0x63, 0x5f, 0x6d,
	0x76, 0x22, 0xcf, 0x01, 0x0a, 0x11, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f,
	0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x22, 0x3c, 0x0a, 0x12, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x42, 0x61, 0x73, 0x69, 0x63, 0x52, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x22, 0xd3, 0x05, 0x0a, 0x09, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x79,
	0x5f, 0x73, 0x6d, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62,
	0x75, 0x79, 0x5f, 0x73, 0x6d, 0x5f, 0x76, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x75, 0x79,
	0x5f, 0x73, 0x6d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x62, 0x75, 0x79, 0x5f, 0x73, 0x6d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x6d, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x6d, 0x5f, 0x76, 0x6f,
	0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x73, 0x6d, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x6c, 0x5f,
	0x73, 0x6d, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x79,
	0x5f, 0x6d, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62,
	0x75, 0x79, 0x5f, 0x6d, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x75, 0x79,
	0x5f, 0x6d, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x62, 0x75, 0x79, 0x5f, 0x6d, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x64, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x64, 0x5f, 0x76, 0x6f,
	0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6d, 0x64, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x6c, 0x5f,
	0x6d, 0x64, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x79,
	0x5f, 0x6c, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x62,
	0x75, 0x79, 0x5f, 0x6c, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x75, 0x79,
	0x5f, 0x6c, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0d, 0x62, 0x75, 0x79, 0x5f, 0x6c, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6c, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6c, 0x67, 0x5f, 0x76, 0x6f,
	0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x6c, 0x67, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x73, 0x65, 0x6c, 0x6c, 0x5f,
	0x6c, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x75, 0x79,
	0x5f, 0x65, 0x6c, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b,
	0x62, 0x75, 0x79, 0x5f, 0x65, 0x6c, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x62,
	0x75, 0x79, 0x5f, 0x65, 0x6c, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0e, 0x62, 0x75, 0x79, 0x5f, 0x65, 0x6c, 0x67, 0x5f, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x65, 0x6c, 0x67, 0x5f,
	0x76, 0x6f, 0x6c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x65, 0x6c, 0x6c, 0x5f,
	0x65, 0x6c, 0x67, 0x5f, 0x76, 0x6f, 0x6c, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x6c, 0x5f,
	0x65, 0x6c, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x65, 0x6c, 0x67, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x66, 0x5f, 0x76, 0x6f, 0x6c, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x66, 0x5f, 0x76, 0x6f,
	0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x66, 0x5f, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6e, 0x65, 0x74, 0x5f, 0x6d, 0x66,
	0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xce, 0x01, 0x0a, 0x10, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0x3a, 0x0a, 0x11, 0x4d, 0x6f, 0x6e, 0x65,
	0x79, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x52, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x22, 0x9e, 0x01, 0x0a, 0x08, 0x53, 0x74, 0x6b, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x70, 0x72, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x70, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x75, 0x70, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x5f, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x64, 0x6f, 0x77, 0x6e, 0x5f,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x22, 0xcd, 0x01, 0x0a, 0x0f, 0x53, 0x74, 0x6b, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0x38, 0x0a, 0x10, 0x53, 0x74, 0x6b, 0x4c, 0x69, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x74, 0x6b, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22,
	0x90, 0x01, 0x0a, 0x08, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e,
	0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x22,
	0x0a, 0x0c, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xf1, 0x01, 0x0a, 0x0f, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74,
	0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x38, 0x0a, 0x10, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e,
	0x64, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x64, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x22, 0xc7, 0x01, 0x0a, 0x0d, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x73,
	0x67, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x67, 0x74, 0x5f, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x67, 0x67, 0x74, 0x5f, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x67,
	0x74, 0x5f, 0x73, 0x7a, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x67, 0x67, 0x74, 0x5f,
	0x73, 0x7a, 0x12, 0x10, 0x0a, 0x03, 0x68, 0x67, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x03, 0x68, 0x67, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x67, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x03, 0x73, 0x67, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x5f,
	0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x6e, 0x6f, 0x72,
	0x74, 0x68, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6f, 0x75, 0x74,
	0x68, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73,
	0x6f, 0x75, 0x74, 0x68, 0x5f, 0x6d, 0x6f, 0x6e, 0x65, 0x79, 0x22, 0xb8, 0x01, 0x0a, 0x14, 0x4d,
	0x6f, 0x6e, 0x65, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x48, 0x73, 0x67, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66,
	0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74,
	0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x22, 0x42, 0x0a, 0x15, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x46, 0x6c,
	0x6f, 0x77, 0x48, 0x73, 0x67, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x6f, 0x6e, 0x65, 0x79, 0x46, 0x6c, 0x6f, 0x77, 0x48,
	0x73, 0x67, 0x74, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0x9b, 0x02, 0x0a, 0x09, 0x48, 0x73,
	0x67, 0x74, 0x54, 0x6f, 0x70, 0x31, 0x30, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61,
	0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63,
	0x68, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x10, 0x0a, 0x03, 0x62, 0x75, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03,
	0x62, 0x75, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x6c, 0x22, 0xf0, 0x01, 0x0a, 0x10, 0x48, 0x73, 0x67, 0x74,
	0x54, 0x6f, 0x70, 0x31, 0x30, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22, 0x3a, 0x0a, 0x11, 0x48, 0x73,
	0x67, 0x74, 0x54, 0x6f, 0x70, 0x31, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x25, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x73, 0x67, 0x74, 0x54, 0x6f, 0x70, 0x31, 0x30,
	0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xe4, 0x03, 0x0a, 0x08, 0x47, 0x67, 0x74, 0x54, 0x6f,
	0x70, 0x31, 0x30, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64,
	0x61, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x70, 0x5f, 0x63, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x04, 0x72, 0x61, 0x6e, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x68, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x68, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x68, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x68, 0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x68, 0x5f, 0x62, 0x75, 0x79, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x68, 0x5f, 0x62, 0x75, 0x79, 0x12, 0x18, 0x0a,
	0x07, 0x73, 0x68, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07,
	0x73, 0x68, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x7a, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x7a, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x7a, 0x5f, 0x6e, 0x65, 0x74, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x73, 0x7a,
	0x5f, 0x6e, 0x65, 0x74, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x7a, 0x5f, 0x62, 0x75, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x7a, 0x5f,
	0x62, 0x75, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x7a, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x73, 0x7a, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x22, 0xef, 0x01,
	0x0a, 0x0f, 0x47, 0x67, 0x74, 0x54, 0x6f, 0x70, 0x31, 0x30, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x22,
	0x38, 0x0a, 0x10, 0x47, 0x67, 0x74, 0x54, 0x6f, 0x70, 0x31, 0x30, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x67, 0x74, 0x54, 0x6f,
	0x70, 0x31, 0x30, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xae, 0x01, 0x0a, 0x08, 0x47, 0x67,
	0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x5f, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x75, 0x79, 0x5f,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x75, 0x79, 0x5f, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x75, 0x79, 0x5f,
	0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73, 0x65, 0x6c,
	0x6c, 0x5f, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x6c, 0x6c,
	0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x73,
	0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x75, 0x6d, 0x65, 0x22, 0xb3, 0x01, 0x0a, 0x0f, 0x47,
	0x67, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x65,
	0x22, 0x38, 0x0a, 0x10, 0x47, 0x67, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x67, 0x74, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xca, 0x02, 0x0a, 0x0a, 0x47,
	0x67, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12,
	0x20, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x61, 0x6d, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x61, 0x6d,
	0x74, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x76, 0x6f, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x64, 0x61, 0x79, 0x5f, 0x62, 0x75, 0x79, 0x5f,
	0x76, 0x6f, 0x6c, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f,
	0x61, 0x6d, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x64, 0x61, 0x79, 0x5f, 0x73,
	0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x6d, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x64, 0x61, 0x79, 0x5f, 0x73,
	0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x64,
	0x61, 0x79, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x61, 0x6d, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x61, 0x6d,
	0x74, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x62, 0x75, 0x79, 0x5f, 0x76,
	0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x62, 0x75, 0x79, 0x5f, 0x76, 0x6f, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x6d, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x61, 0x6d, 0x74, 0x12,
	0x26, 0x0a, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73, 0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f,
	0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x73,
	0x65, 0x6c, 0x6c, 0x5f, 0x76, 0x6f, 0x6c, 0x22, 0xaf, 0x01, 0x0a, 0x11, 0x47, 0x67, 0x74, 0x4d,
	0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x1c, 0x0a, 0x09, 0x65,
	0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x65, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x22, 0x3c, 0x0a, 0x12, 0x47, 0x67, 0x74,
	0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x26, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x67, 0x74, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x6c,
	0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x22, 0xba, 0x06, 0x0a, 0x08, 0x42, 0x61, 0x6b, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x70, 0x63, 0x74, 0x5f, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x05, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x68, 0x61, 0x6e,
	0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x12, 0x0a, 0x04, 0x6f, 0x70, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04,
	0x6f, 0x70, 0x65, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x69, 0x67, 0x68, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x04, 0x68, 0x69, 0x67, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6c, 0x6f, 0x77, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x6c, 0x6f, 0x77, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x70,
	0x72, 0x65, 0x5f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f, 0x6c, 0x5f,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x76, 0x6f, 0x6c,
	0x5f, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x75, 0x72, 0x6e, 0x5f, 0x6f,
	0x76, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x74, 0x75, 0x72, 0x6e, 0x5f,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x77, 0x69, 0x6e, 0x67, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x77, 0x69, 0x6e, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x76, 0x6f,
	0x6c, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x03, 0x76, 0x6f, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x73, 0x65, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x16,
	0x0a, 0x06, 0x62, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06,
	0x62, 0x75, 0x79, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x6c, 0x6f, 0x61,
	0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x66,
	0x6c, 0x6f, 0x61, 0x74, 0x5f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x65,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x02, 0x70, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e,
	0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e,
	0x64, 0x75, 0x73, 0x74, 0x72, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x61, 0x72, 0x65, 0x61, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x65, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x5f, 0x6d, 0x76, 0x18, 0x17, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x66, 0x6c,
	0x6f, 0x61, 0x74, 0x5f, 0x6d, 0x76, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6d, 0x76, 0x18, 0x18, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x6d, 0x76, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x61, 0x76, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x76, 0x67, 0x5f,
	0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x61, 0x76, 0x67, 0x5f, 0x74, 0x75, 0x72, 0x6e, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x61, 0x74, 0x74, 0x61, 0x63, 0x6b, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x74,
	0x74, 0x61, 0x63, 0x6b, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x5f, 0x33, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x33, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x5f, 0x36, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x5f, 0x36, 0x22, 0xcd, 0x01, 0x0a, 0x0f, 0x42, 0x61, 0x6b, 0x44, 0x61, 0x69, 0x6c,
	0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x18,
	0x0a, 0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x64,
	0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x72,
	0x61, 0x64, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x5f,
	0x64, 0x61, 0x74, 0x65, 0x22, 0x38, 0x0a, 0x10, 0x42, 0x61, 0x6b, 0x44, 0x61, 0x69, 0x6c, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x42, 0x61, 0x6b, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x78,
	0x0a, 0x0a, 0x63, 0x6f, 0x6d, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x42, 0x0a, 0x53, 0x74,
	0x6f, 0x63, 0x6b, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x25, 0x67, 0x69, 0x74, 0x68,
	0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x69, 0x73, 0x66, 0x6b, 0x2f, 0x74, 0x75, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x3b, 0x76,
	0x31, 0xa2, 0x02, 0x03, 0x41, 0x58, 0x58, 0xaa, 0x02, 0x06, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31,
	0xca, 0x02, 0x06, 0x41, 0x70, 0x69, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x12, 0x41, 0x70, 0x69, 0x5c,
	0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02,
	0x07, 0x41, 0x70, 0x69, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_api_v1_stock_proto_rawDescOnce sync.Once
	file_api_v1_stock_proto_rawDescData = file_api_v1_stock_proto_rawDesc
)

func file_api_v1_stock_proto_rawDescGZIP() []byte {
	file_api_v1_stock_proto_rawDescOnce.Do(func() {
		file_api_v1_stock_proto_rawDescData = protoimpl.X.CompressGZIP(file_api_v1_stock_proto_rawDescData)
	})
	return file_api_v1_stock_proto_rawDescData
}

var file_api_v1_stock_proto_msgTypes = make([]protoimpl.MessageInfo, 69)
var file_api_v1_stock_proto_goTypes = []interface{}{
	(*StockBasic)(nil),            // 0: api.v1.StockBasic
	(*StockBasicRequest)(nil),     // 1: api.v1.StockBasicRequest
	(*StockBasicResponse)(nil),    // 2: api.v1.StockBasicResponse
	(*TradeCal)(nil),              // 3: api.v1.TradeCal
	(*TradeCalRequest)(nil),       // 4: api.v1.TradeCalRequest
	(*TradeCalResponse)(nil),      // 5: api.v1.TradeCalResponse
	(*NameChange)(nil),            // 6: api.v1.NameChange
	(*NameChangeRequest)(nil),     // 7: api.v1.NameChangeRequest
	(*NameChangeResponse)(nil),    // 8: api.v1.NameChangeResponse
	(*HsConst)(nil),               // 9: api.v1.HsConst
	(*HsConstRequest)(nil),        // 10: api.v1.HsConstRequest
	(*HsConstResponse)(nil),       // 11: api.v1.HsConstResponse
	(*StockCompany)(nil),          // 12: api.v1.StockCompany
	(*StockCompanyRequest)(nil),   // 13: api.v1.StockCompanyRequest
	(*StockCompanyResponse)(nil),  // 14: api.v1.StockCompanyResponse
	(*StkManagers)(nil),           // 15: api.v1.StkManagers
	(*StkManagersRequest)(nil),    // 16: api.v1.StkManagersRequest
	(*StkManagersResponse)(nil),   // 17: api.v1.StkManagersResponse
	(*StkRewards)(nil),            // 18: api.v1.StkRewards
	(*StkRewardsRequest)(nil),     // 19: api.v1.StkRewardsRequest
	(*StkRewardsResponse)(nil),    // 20: api.v1.StkRewardsResponse
	(*NewShare)(nil),              // 21: api.v1.NewShare
	(*NewShareRequest)(nil),       // 22: api.v1.NewShareRequest
	(*NewShareResponse)(nil),      // 23: api.v1.NewShareResponse
	(*BakBasic)(nil),              // 24: api.v1.BakBasic
	(*BakBasicRequest)(nil),       // 25: api.v1.BakBasicRequest
	(*BakBasicResponse)(nil),      // 26: api.v1.BakBasicResponse
	(*Daily)(nil),                 // 27: api.v1.Daily
	(*DailyRequest)(nil),          // 28: api.v1.DailyRequest
	(*DailyResponse)(nil),         // 29: api.v1.DailyResponse
	(*Weekly)(nil),                // 30: api.v1.Weekly
	(*WeeklyRequest)(nil),         // 31: api.v1.WeeklyRequest
	(*WeeklyResponse)(nil),        // 32: api.v1.WeeklyResponse
	(*Monthly)(nil),               // 33: api.v1.Monthly
	(*MonthlyRequest)(nil),        // 34: api.v1.MonthlyRequest
	(*MonthlyResponse)(nil),       // 35: api.v1.MonthlyResponse
	(*AdjFactor)(nil),             // 36: api.v1.AdjFactor
	(*AdjFactorRequest)(nil),      // 37: api.v1.AdjFactorRequest
	(*AdjFactorResponse)(nil),     // 38: api.v1.AdjFactorResponse
	(*DailyBasic)(nil),            // 39: api.v1.DailyBasic
	(*DailyBasicRequest)(nil),     // 40: api.v1.DailyBasicRequest
	(*DailyBasicResponse)(nil),    // 41: api.v1.DailyBasicResponse
	(*MoneyFlow)(nil),             // 42: api.v1.MoneyFlow
	(*MoneyFlowRequest)(nil),      // 43: api.v1.MoneyFlowRequest
	(*MoneyFlowResponse)(nil),     // 44: api.v1.MoneyFlowResponse
	(*StkLimit)(nil),              // 45: api.v1.StkLimit
	(*StkLimitRequest)(nil),       // 46: api.v1.StkLimitRequest
	(*StkLimitResponse)(nil),      // 47: api.v1.StkLimitResponse
	(*Suspendd)(nil),              // 48: api.v1.Suspendd
	(*SuspenddRequest)(nil),       // 49: api.v1.SuspenddRequest
	(*SuspenddResponse)(nil),      // 50: api.v1.SuspenddResponse
	(*MoneyFlowHsgt)(nil),         // 51: api.v1.MoneyFlowHsgt
	(*MoneyFlowHsgtRequest)(nil),  // 52: api.v1.MoneyFlowHsgtRequest
	(*MoneyFlowHsgtResponse)(nil), // 53: api.v1.MoneyFlowHsgtResponse
	(*HsgtTop10)(nil),             // 54: api.v1.HsgtTop10
	(*HsgtTop10Request)(nil),      // 55: api.v1.HsgtTop10Request
	(*HsgtTop10Response)(nil),     // 56: api.v1.HsgtTop10Response
	(*GgtTop10)(nil),              // 57: api.v1.GgtTop10
	(*GgtTop10Request)(nil),       // 58: api.v1.GgtTop10Request
	(*GgtTop10Response)(nil),      // 59: api.v1.GgtTop10Response
	(*GgtDaily)(nil),              // 60: api.v1.GgtDaily
	(*GgtDailyRequest)(nil),       // 61: api.v1.GgtDailyRequest
	(*GgtDailyResponse)(nil),      // 62: api.v1.GgtDailyResponse
	(*GgtMonthly)(nil),            // 63: api.v1.GgtMonthly
	(*GgtMonthlyRequest)(nil),     // 64: api.v1.GgtMonthlyRequest
	(*GgtMonthlyResponse)(nil),    // 65: api.v1.GgtMonthlyResponse
	(*BakDaily)(nil),              // 66: api.v1.BakDaily
	(*BakDailyRequest)(nil),       // 67: api.v1.BakDailyRequest
	(*BakDailyResponse)(nil),      // 68: api.v1.BakDailyResponse
}
var file_api_v1_stock_proto_depIdxs = []int32{
	0,  // 0: api.v1.StockBasicResponse.list:type_name -> api.v1.StockBasic
	3,  // 1: api.v1.TradeCalResponse.list:type_name -> api.v1.TradeCal
	6,  // 2: api.v1.NameChangeResponse.list:type_name -> api.v1.NameChange
	9,  // 3: api.v1.HsConstResponse.list:type_name -> api.v1.HsConst
	12, // 4: api.v1.StockCompanyResponse.list:type_name -> api.v1.StockCompany
	15, // 5: api.v1.StkManagersResponse.list:type_name -> api.v1.StkManagers
	18, // 6: api.v1.StkRewardsResponse.list:type_name -> api.v1.StkRewards
	21, // 7: api.v1.NewShareResponse.list:type_name -> api.v1.NewShare
	24, // 8: api.v1.BakBasicResponse.list:type_name -> api.v1.BakBasic
	27, // 9: api.v1.DailyResponse.list:type_name -> api.v1.Daily
	30, // 10: api.v1.WeeklyResponse.list:type_name -> api.v1.Weekly
	33, // 11: api.v1.MonthlyResponse.list:type_name -> api.v1.Monthly
	36, // 12: api.v1.AdjFactorResponse.list:type_name -> api.v1.AdjFactor
	39, // 13: api.v1.DailyBasicResponse.list:type_name -> api.v1.DailyBasic
	42, // 14: api.v1.MoneyFlowResponse.list:type_name -> api.v1.MoneyFlow
	45, // 15: api.v1.StkLimitResponse.list:type_name -> api.v1.StkLimit
	48, // 16: api.v1.SuspenddResponse.list:type_name -> api.v1.Suspendd
	51, // 17: api.v1.MoneyFlowHsgtResponse.list:type_name -> api.v1.MoneyFlowHsgt
	54, // 18: api.v1.HsgtTop10Response.list:type_name -> api.v1.HsgtTop10
	57, // 19: api.v1.GgtTop10Response.list:type_name -> api.v1.GgtTop10
	60, // 20: api.v1.GgtDailyResponse.list:type_name -> api.v1.GgtDaily
	63, // 21: api.v1.GgtMonthlyResponse.list:type_name -> api.v1.GgtMonthly
	66, // 22: api.v1.BakDailyResponse.list:type_name -> api.v1.BakDaily
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_api_v1_stock_proto_init() }
func file_api_v1_stock_proto_init() {
	if File_api_v1_stock_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_api_v1_stock_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockBasic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockBasicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockBasicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeCal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeCalRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TradeCalResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameChange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameChangeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameChangeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HsConst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HsConstRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HsConstResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockCompany); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockCompanyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StockCompanyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StkManagers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StkManagersRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StkManagersResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StkRewards); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StkRewardsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StkRewardsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewShare); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewShareRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NewShareResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakBasic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakBasicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakBasicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Daily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Weekly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeeklyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WeeklyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Monthly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MonthlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdjFactor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdjFactorRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AdjFactorResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyBasic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyBasicRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DailyBasicResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyFlow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyFlowRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyFlowResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StkLimit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StkLimitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StkLimitResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Suspendd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuspenddRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SuspenddResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyFlowHsgt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyFlowHsgtRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MoneyFlowHsgtResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HsgtTop10); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HsgtTop10Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HsgtTop10Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GgtTop10); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GgtTop10Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GgtTop10Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GgtDaily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GgtDailyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GgtDailyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GgtMonthly); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GgtMonthlyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GgtMonthlyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakDaily); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakDailyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_api_v1_stock_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BakDailyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_api_v1_stock_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   69,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_api_v1_stock_proto_goTypes,
		DependencyIndexes: file_api_v1_stock_proto_depIdxs,
		MessageInfos:      file_api_v1_stock_proto_msgTypes,
	}.Build()
	File_api_v1_stock_proto = out.File
	file_api_v1_stock_proto_rawDesc = nil
	file_api_v1_stock_proto_goTypes = nil
	file_api_v1_stock_proto_depIdxs = nil
}
