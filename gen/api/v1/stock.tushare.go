// Code generated by protoc-gen-go-tushare. DO NOT EDIT.
// source: api/v1/stock.proto

package v1

import (
	json "encoding/json"
)

var _ = json.Decoder{}

// 股票列表
type StockBasic struct {
	TsCode     string `json:"ts_code"`      // TS代码
	Symbol     string `json:"symbol"`       // 股票代码
	Name       string `json:"name"`         // 股票名称
	Area       string `json:"area"`         // 地域
	Industry   string `json:"industry"`     // 所属行业
	Fullname   string `json:"fullname"`     // 股票全称
	Enname     string `json:"enname"`       // 英文全称
	Cnspell    string `json:"cnspell"`      // 拼音缩写
	Market     string `json:"market"`       // 市场类型（主板/创业板/科创板/CDR）
	Exchange   string `json:"exchange"`     // 交易所代码
	CurrType   string `json:"curr_type"`    // 交易货币
	ListStatus string `json:"list_status"`  // 上市状态 L上市 D退市 P暂停上市
	ListDate   string `json:"list_date"`    // 上市日期
	DelistDate string `json:"delist_date"`  // 退市日期
	IsHs       string `json:"is_hs"`        // 是否沪深港通标的，N否 H沪股通 S深股通
	ActName    string `json:"act_name"`     // 实控人名称
	ActEntType string `json:"act_ent_type"` // 实控人企业性质
}

// FieldsStockBasic StockBasic fields
var FieldsStockBasic = []string{"ts_code", "symbol", "name", "area", "industry", "fullname", "enname", "cnspell", "market", "exchange", "curr_type", "list_status", "list_date", "delist_date", "is_hs", "act_name", "act_ent_type"}

type StockBasicRequest struct {
	Limit      string `json:"limit"`
	Offset     string `json:"offset"`
	TsCode     string `json:"ts_code"`     //TS股票代码
	Name       string `json:"name"`        //名称
	Market     string `json:"market"`      //市场类别 （主板/创业板/科创板/CDR/北交所）
	ListStatus string `json:"list_status"` //上市状态 L上市 D退市 P暂停上市，默认是L
	Exchange   string `json:"exchange"`    //交易所 SSE上交所 SZSE深交所 BSE北交所
	IsHs       string `json:"is_hs"`       //是否沪深港通标的，N否 H沪股通 S深股通
}

type StockBasicResponse struct {
	List []*StockBasic `json:"list"`
}

func (x *StockBasicResponse) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}

// 交易日历
type TradeCal struct {
	Exchange     string `json:"exchange"`      // 交易所 SSE上交所 SZSE深交所
	CalDate      string `json:"cal_date"`      // 日历日期
	IsOpen       int32  `json:"is_open"`       // 是否交易 0休市 1交易
	PretradeDate string `json:"pretrade_date"` // 上一个交易日
}

// FieldsTradeCal TradeCal fields
var FieldsTradeCal = []string{"exchange", "cal_date", "is_open", "pretrade_date"}

type TradeCalRequest struct {
	Limit     string `json:"limit"`
	Offset    string `json:"offset"`
	Exchange  string `json:"exchange"`   // 交易所 SSE上交所,SZSE深交所,CFFEX 中金所,SHFE 上期所,CZCE 郑商所,DCE 大商所,INE 上能源
	StartDate string `json:"start_date"` // 开始日期 （格式：YYYYMMDD 下同）
	EndDate   string `json:"end_date"`   // 结束日期
	IsOpen    string `json:"is_open"`    // 是否交易 '0'休市 '1'交易
	CalDate   string `json:"cal_date"`   // 日历日期
}

type TradeCalResponse struct {
	List []*TradeCal `json:"list"`
}

func (x *TradeCalResponse) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}

// 股票曾用名
type NameChange struct {
	TsCode       string `json:"ts_code"`       // TS代码
	Name         string `json:"name"`          // 证券名称
	StartDate    string `json:"start_date"`    // 开始日期
	EndDate      string `json:"end_date"`      // 结束日期
	AnnDate      string `json:"ann_date"`      // 公告日期
	ChangeReason string `json:"change_reason"` // 变更原因
}

// FieldsNameChange NameChange fields
var FieldsNameChange = []string{"ts_code", "name", "start_date", "end_date", "ann_date", "change_reason"}

type NameChangeRequest struct {
	Limit     string `json:"limit"`
	Offset    string `json:"offset"`
	TsCode    string `json:"ts_code"`    // TS代码
	StartDate string `json:"start_date"` // 公告开始日期
	EndDate   string `json:"end_date"`   // 公告结束日期
}

type NameChangeResponse struct {
	List []*NameChange `json:"list"`
}

func (x *NameChangeResponse) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}

// 沪深股通成份股
type HsConst struct {
	TsCode  string `json:"ts_code"`  // TS代码
	HsType  string `json:"hs_type"`  // 沪深港通类型SH沪SZ深
	InDate  string `json:"in_date"`  // 纳入日期
	OutDate string `json:"out_date"` // 剔除日期
	IsNew   string `json:"is_new"`   // 是否最新 1是 0否
}

// FieldsHsConst HsConst fields
var FieldsHsConst = []string{"ts_code", "hs_type", "in_date", "out_date", "is_new"}

type HsConstRequest struct {
	Limit  string `json:"limit"`
	Offset string `json:"offset"`
	HsType string `json:"hs_type"` // 类型SH沪股通SZ深股通
	IsNew  string `json:"is_new"`  // 是否最新 1 是 0 否 (默认1)
	TsCode string `json:"ts_code"` // TS代码
}

type HsConstResponse struct {
	List []*HsConst `json:"list"`
}

func (x *HsConstResponse) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}

// 上市公司基本信息
type StockCompany struct {
	TsCode        string  `json:"ts_code"`        // 股票代码
	Exchange      string  `json:"exchange"`       // 交易所代码 ，SSE上交所 SZSE深交所
	Chairman      string  `json:"chairman"`       // 法人代表
	Manager       string  `json:"manager"`        // 总经理
	Secretary     string  `json:"secretary"`      // 董秘
	RegCapital    float32 `json:"reg_capital"`    // 注册资本(万元)
	SetupDate     string  `json:"setup_date"`     // 注册日期
	Province      string  `json:"province"`       // 所在省份
	City          string  `json:"city"`           // 所在城市
	Introduction  string  `json:"introduction"`   // 公司介绍
	Website       string  `json:"website"`        // 公司主页
	Email         string  `json:"email"`          // 电子邮件
	Office        string  `json:"office"`         // 办公室
	Employees     int64   `json:"employees"`      // 员工人数
	MainBusiness  string  `json:"main_business"`  // 主要业务及产品
	BusinessScope string  `json:"business_scope"` // 经营范围
}

// FieldsStockCompany StockCompany fields
var FieldsStockCompany = []string{"ts_code", "exchange", "chairman", "manager", "secretary", "reg_capital", "setup_date", "province", "city", "introduction", "website", "email", "office", "employees", "main_business", "business_scope"}

type StockCompanyRequest struct {
	Limit    string `json:"limit"`
	Offset   string `json:"offset"`
	TsCode   string `json:"ts_code"`  // 股票代码
	Exchange string `json:"exchange"` // 交易所代码 ，SSE上交所 SZSE深交所 BSE北交所
	Status   string `json:"status"`   // 状态
}

type StockCompanyResponse struct {
	List []*StockCompany `json:"list"`
}

func (x *StockCompanyResponse) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}

// 上市公司管理层
type StkManagers struct {
	TsCode    string `json:"ts_code"`    // TS股票代码
	AnnDate   string `json:"ann_date"`   // 公告日期
	Name      string `json:"name"`       // 姓名
	Gender    string `json:"gender"`     // 性别
	Lev       string `json:"lev"`        // 岗位类别
	Title     string `json:"title"`      // 岗位
	Edu       string `json:"edu"`        // 学历
	National  string `json:"national"`   // 国籍
	Birthday  string `json:"birthday"`   // 出生年月
	BeginDate string `json:"begin_date"` // 上任日期
	EndDate   string `json:"end_date"`   // 离任日期
	Resume    string `json:"resume"`     // 个人简历
}

// FieldsStkManagers StkManagers fields
var FieldsStkManagers = []string{"ts_code", "ann_date", "name", "gender", "lev", "title", "edu", "national", "birthday", "begin_date", "end_date", "resume"}

type StkManagersRequest struct {
	Limit     string `json:"limit"`
	Offset    string `json:"offset"`
	TsCode    string `json:"ts_code"`    //股票代码，支持单个或多个股票输入
	AnnDate   string `json:"ann_date"`   //公告日期（YYYYMMDD格式，下同）
	StartDate string `json:"start_date"` //公告开始日期
	EndDate   string `json:"end_date"`   //公告结束日期
}

type StkManagersResponse struct {
	List []*StkManagers `json:"list"`
}

func (x *StkManagersResponse) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}

// 管理层薪酬和持股
type StkRewards struct {
	TsCode  string  `json:"ts_code"`  // TS股票代码
	AnnDate string  `json:"ann_date"` // 公告日期
	EndDate string  `json:"end_date"` // 截止日期
	Name    string  `json:"name"`     // 姓名
	Title   string  `json:"title"`    // 职务
	Reward  float32 `json:"reward"`   // 报酬
	HoldVol float32 `json:"hold_vol"` // 持股数
}

// FieldsStkRewards StkRewards fields
var FieldsStkRewards = []string{"ts_code", "ann_date", "end_date", "name", "title", "reward", "hold_vol"}

type StkRewardsRequest struct {
	Limit   string `json:"limit"`
	Offset  string `json:"offset"`
	TsCode  string `json:"ts_code"`  // TS股票代码，支持单个或多个代码输入
	EndDate string `json:"end_date"` // 报告期
}

type StkRewardsResponse struct {
	List []*StkRewards `json:"list"`
}

func (x *StkRewardsResponse) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}

// IPO新股列表
type NewShare struct {
	TsCode       string  `json:"ts_code"`       // TS股票代码
	SubCode      string  `json:"sub_code"`      // 申购代码
	Name         string  `json:"name"`          // 名称
	IpoDate      string  `json:"ipo_date"`      // 上网发行日期
	IssueDate    string  `json:"issue_date"`    // 上市日期
	Amount       float32 `json:"amount"`        // 发行总量（万股）
	MarketAmount float32 `json:"market_amount"` // 上网发行总量（万股）
	Price        float32 `json:"price"`         // 发行价格
	Pe           float32 `json:"pe"`            // 市盈率
	LimitAmount  float32 `json:"limit_amount"`  // 个人申购上限（万股）
	Funds        float32 `json:"funds"`         // 募集资金（亿元）
	Ballot       float32 `json:"ballot"`        // 中签率
}

// FieldsNewShare NewShare fields
var FieldsNewShare = []string{"ts_code", "sub_code", "name", "ipo_date", "issue_date", "amount", "market_amount", "price", "pe", "limit_amount", "funds", "ballot"}

type NewShareRequest struct {
	Limit     string `json:"limit"`
	Offset    string `json:"offset"`
	StartDate string `json:"start_date"` // 上网发行开始日期
	EndDate   string `json:"end_date"`   // 上网发行结束日期
}

type NewShareResponse struct {
	List []*NewShare `json:"list"`
}

func (x *NewShareResponse) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}

// 备用列表
type BakBasic struct {
	TradeDate        string  `json:"trade_date"`        // 交易日期
	TsCode           string  `json:"ts_code"`           // TS股票代码
	Name             string  `json:"name"`              // 股票名称
	Industry         string  `json:"industry"`          // 行业
	Area             string  `json:"area"`              // 地域
	Pe               float32 `json:"pe"`                // 市盈率（动）
	FloatShare       float32 `json:"float_share"`       // 流通股本（亿）
	TotalShare       float32 `json:"total_share"`       // 总股本（亿）
	TotalAssets      float32 `json:"total_assets"`      // 总资产（亿）
	LiquidAssets     float32 `json:"liquid_assets"`     // 流动资产（亿）
	FixedAssets      float32 `json:"fixed_assets"`      // 固定资产（亿）
	Reserved         float32 `json:"reserved"`          // 公积金
	ReservedPershare float32 `json:"reserved_pershare"` // 每股公积金
	Eps              float32 `json:"eps"`               // 每股收益
	Bvps             float32 `json:"bvps"`              // 每股净资产
	Pb               float32 `json:"pb"`                // 市净率
	ListDate         string  `json:"list_date"`         // 上市日期
	Undp             float32 `json:"undp"`              // 未分配利润
	PerUndp          float32 `json:"per_undp"`          // 每股未分配利润
	RevYoy           float32 `json:"rev_yoy"`           // 收入同比（%）
	ProfitYoy        float32 `json:"profit_yoy"`        // 利润同比（%）
	Gpr              float32 `json:"gpr"`               // 毛利率（%）
	Npr              float32 `json:"npr"`               // 净利润率（%）
	HolderNum        int64   `json:"holder_num"`        // 股东人数
}

// FieldsBakBasic BakBasic fields
var FieldsBakBasic = []string{"trade_date", "ts_code", "name", "industry", "area", "pe", "float_share", "total_share", "total_assets", "liquid_assets", "fixed_assets", "reserved", "reserved_pershare", "eps", "bvps", "pb", "list_date", "undp", "per_undp", "rev_yoy", "profit_yoy", "gpr", "npr", "holder_num"}

type BakBasicRequest struct {
	Limit     string `json:"limit"`
	Offset    string `json:"offset"`
	TradeDate string `json:"trade_date"` // 交易日期
	TsCode    string `json:"ts_code"`    // 股票代码
}

type BakBasicResponse struct {
	List []*BakBasic `json:"list"`
}

func (x *BakBasicResponse) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}

// 日线行情
type Daily struct {
	TsCode    string  `json:"ts_code"`    // 股票代码
	TradeDate string  `json:"trade_date"` // 交易日期
	Open      float32 `json:"open"`       // 开盘价
	High      float32 `json:"high"`       // 最高价
	Low       float32 `json:"low"`        // 最低价
	Close     float32 `json:"close"`      // 收盘价
	PreClose  float32 `json:"pre_close"`  // 昨收价(前复权)
	Change    float32 `json:"change"`     // 涨跌额
	PctChg    float32 `json:"pct_chg"`    // 涨跌幅 （未复权，如果是复权请用 通用行情接口 ）
	Vol       float32 `json:"vol"`        // 成交量 （手）
	Amount    float32 `json:"amount"`     // 成交额 （千元）
}

// FieldsDaily Daily fields
var FieldsDaily = []string{"ts_code", "trade_date", "open", "high", "low", "close", "pre_close", "change", "pct_chg", "vol", "amount"}

type DailyRequest struct {
	Limit     string `json:"limit"`
	Offset    string `json:"offset"`
	TsCode    string `json:"ts_code"`    // 股票代码（支持多个股票同时提取，逗号分隔）
	TradeDate string `json:"trade_date"` // 交易日期（YYYYMMDD）
	StartDate string `json:"start_date"` // 开始日期(YYYYMMDD)
	EndDate   string `json:"end_date"`   // 结束日期(YYYYMMDD)
}

type DailyResponse struct {
	List []*Daily `json:"list"`
}

func (x *DailyResponse) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}

// 周线行情
type Weekly struct {
	TsCode    string  `json:"ts_code"`    // 股票代码
	TradeDate string  `json:"trade_date"` // 交易日期
	Close     float32 `json:"close"`      // 周收盘价
	Open      float32 `json:"open"`       // 周开盘价
	High      float32 `json:"high"`       // 周最高价
	Low       float32 `json:"low"`        // 周最低价
	PreClose  float32 `json:"pre_close"`  // 上一周收盘价
	Change    float32 `json:"change"`     // 周涨跌额
	PctChg    float32 `json:"pct_chg"`    // 周涨跌幅（未复权，如果是复权请用 通用行情接口 ）
	Vol       float32 `json:"vol"`        // 周成交量
	Amount    float32 `json:"amount"`     // 周成交额
}

// FieldsWeekly Weekly fields
var FieldsWeekly = []string{"ts_code", "trade_date", "close", "open", "high", "low", "pre_close", "change", "pct_chg", "vol", "amount"}

type WeeklyRequest struct {
	Limit     string `json:"limit"`
	Offset    string `json:"offset"`
	TsCode    string `json:"ts_code"`    // TS代码 （ts_code,trade_date两个参数任选一）
	TradeDate string `json:"trade_date"` // 交易日期 （每周最后一个交易日期，YYYYMMDD格式）
	StartDate string `json:"start_date"` // 开始日期
	EndDate   string `json:"end_date"`   // 结束日期
}

type WeeklyResponse struct {
	List []*Weekly `json:"list"`
}

func (x *WeeklyResponse) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}

// 月线行情
type Monthly struct {
	TsCode    string  `json:"ts_code"`    // 股票代码
	TradeDate string  `json:"trade_date"` // 交易日期
	Close     float32 `json:"close"`      // 月收盘价
	Open      float32 `json:"open"`       // 月开盘价
	High      float32 `json:"high"`       // 月最高价
	Low       float32 `json:"low"`        // 月最低价
	PreClose  float32 `json:"pre_close"`  // 上月收盘价
	Change    float32 `json:"change"`     // 月涨跌额
	PctChg    float32 `json:"pct_chg"`    // 月涨跌幅（未复权，如果是复权请用 通用行情接口 ）
	Vol       float32 `json:"vol"`        // 月成交量
	Amount    float32 `json:"amount"`     // 月成交额
}

// FieldsMonthly Monthly fields
var FieldsMonthly = []string{"ts_code", "trade_date", "close", "open", "high", "low", "pre_close", "change", "pct_chg", "vol", "amount"}

type MonthlyRequest struct {
	Limit     string `json:"limit"`
	Offset    string `json:"offset"`
	TsCode    string `json:"ts_code"`    // TS代码 （ts_code,trade_date两个参数任选一）
	TradeDate string `json:"trade_date"` // 交易日期 （每月最后一个交易日日期，YYYYMMDD格式）
	StartDate string `json:"start_date"` // 开始日期
	EndDate   string `json:"end_date"`   // 结束日期
}

type MonthlyResponse struct {
	List []*Monthly `json:"list"`
}

func (x *MonthlyResponse) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}

// 复权因子
type AdjFactor struct {
	TsCode    string  `json:"ts_code"`    // 股票代码
	TradeDate string  `json:"trade_date"` // 交易日期
	AdjFactor float32 `json:"adj_factor"` // 复权因子
}

// FieldsAdjFactor AdjFactor fields
var FieldsAdjFactor = []string{"ts_code", "trade_date", "adj_factor"}

type AdjFactorRequest struct {
	Limit     string `json:"limit"`
	Offset    string `json:"offset"`
	TsCode    string `json:"ts_code"`    // 股票代码
	TradeDate string `json:"trade_date"` // 交易日期(YYYYMMDD，下同)
	StartDate string `json:"start_date"` // 开始日期
	EndDate   string `json:"end_date"`   // 结束日期
}

type AdjFactorResponse struct {
	List []*AdjFactor `json:"list"`
}

func (x *AdjFactorResponse) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}

// 每日指标
type DailyBasic struct {
	TsCode        string  `json:"ts_code"`         // TS股票代码
	TradeDate     string  `json:"trade_date"`      // 交易日期
	Close         float32 `json:"close"`           // 当日收盘价
	TurnoverRate  float32 `json:"turnover_rate"`   // 换手率（%）
	TurnoverRateF float32 `json:"turnover_rate_f"` // 换手率（自由流通股）
	VolumeRatio   float32 `json:"volume_ratio"`    // 量比
	Pe            float32 `json:"pe"`              // 市盈率（总市值/净利润，亏损的PE为空）
	PeTtm         float32 `json:"pe_ttm"`          // 市盈率（TTM，亏损的PE为空）
	Pb            float32 `json:"pb"`              // 市净率（总市值/净资产）
	Ps            float32 `json:"ps"`              // 市销率
	PsTtm         float32 `json:"ps_ttm"`          // 市销率（TTM）
	DvRatio       float32 `json:"dv_ratio"`        // 股息率（%）
	DvTtm         float32 `json:"dv_ttm"`          // 股息率（TTM）（%）
	TotalShare    float32 `json:"total_share"`     // 总股本（万股）
	FloatShare    float32 `json:"float_share"`     // 流通股本（万股）
	FreeShare     float32 `json:"free_share"`      // 自由流通股本（万）
	TotalMv       float32 `json:"total_mv"`        // 总市值 （万元）
	CircMv        float32 `json:"circ_mv"`         // 流通市值（万元）
}

// FieldsDailyBasic DailyBasic fields
var FieldsDailyBasic = []string{"ts_code", "trade_date", "close", "turnover_rate", "turnover_rate_f", "volume_ratio", "pe", "pe_ttm", "pb", "ps", "ps_ttm", "dv_ratio", "dv_ttm", "total_share", "float_share", "free_share", "total_mv", "circ_mv"}

type DailyBasicRequest struct {
	Limit     string `json:"limit"`
	Offset    string `json:"offset"`
	TsCode    string `json:"ts_code"`    // 股票代码（二选一）
	TradeDate string `json:"trade_date"` // 交易日期 （二选一）
	StartDate string `json:"start_date"` // 开始日期(YYYYMMDD)
	EndDate   string `json:"end_date"`   // 结束日期(YYYYMMDD)
}

type DailyBasicResponse struct {
	List []*DailyBasic `json:"list"`
}

func (x *DailyBasicResponse) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}

// 个股资金流向
type MoneyFlow struct {
	TsCode        string  `json:"ts_code"`         // TS代码
	TradeDate     string  `json:"trade_date"`      // 交易日期
	BuySmVol      int64   `json:"buy_sm_vol"`      // 小单买入量（手）
	BuySmAmount   float32 `json:"buy_sm_amount"`   // 小单买入金额（万元）
	SellSmVol     int64   `json:"sell_sm_vol"`     // 小单卖出量（手）
	SellSmAmount  float32 `json:"sell_sm_amount"`  // 小单卖出金额（万元）
	BuyMdVol      int64   `json:"buy_md_vol"`      // 中单买入量（手）
	BuyMdAmount   float32 `json:"buy_md_amount"`   // 中单买入金额（万元）
	SellMdVol     int64   `json:"sell_md_vol"`     // 中单卖出量（手）
	SellMdAmount  float32 `json:"sell_md_amount"`  // 中单卖出金额（万元）
	BuyLgVol      int64   `json:"buy_lg_vol"`      // 大单买入量（手）
	BuyLgAmount   float32 `json:"buy_lg_amount"`   // 大单买入金额（万元）
	SellLgVol     int64   `json:"sell_lg_vol"`     // 大单卖出量（手）
	SellLgAmount  float32 `json:"sell_lg_amount"`  // 大单卖出金额（万元）
	BuyElgVol     int64   `json:"buy_elg_vol"`     // 特大单买入量（手）
	BuyElgAmount  float32 `json:"buy_elg_amount"`  // 特大单买入金额（万元）
	SellElgVol    int64   `json:"sell_elg_vol"`    // 特大单卖出量（手）
	SellElgAmount float32 `json:"sell_elg_amount"` // 特大单卖出金额（万元）
	NetMfVol      int64   `json:"net_mf_vol"`      // 净流入量（手）
	NetMfAmount   float32 `json:"net_mf_amount"`   // 净流入额（万元）
}

// FieldsMoneyFlow MoneyFlow fields
var FieldsMoneyFlow = []string{"ts_code", "trade_date", "buy_sm_vol", "buy_sm_amount", "sell_sm_vol", "sell_sm_amount", "buy_md_vol", "buy_md_amount", "sell_md_vol", "sell_md_amount", "buy_lg_vol", "buy_lg_amount", "sell_lg_vol", "sell_lg_amount", "buy_elg_vol", "buy_elg_amount", "sell_elg_vol", "sell_elg_amount", "net_mf_vol", "net_mf_amount"}

type MoneyFlowRequest struct {
	Limit     string `json:"limit"`
	Offset    string `json:"offset"`
	TsCode    string `json:"ts_code"`    // 股票代码（股票和时间参数至少输入一个）
	TradeDate string `json:"trade_date"` // 交易日期
	StartDate string `json:"start_date"` // 开始日期
	EndDate   string `json:"end_date"`   // 结束日期
}

type MoneyFlowResponse struct {
	List []*MoneyFlow `json:"list"`
}

func (x *MoneyFlowResponse) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}

// 每日涨跌停价格
type StkLimit struct {
	TradeDate string  `json:"trade_date"` // 交易日期
	TsCode    string  `json:"ts_code"`    // TS股票代码
	PreClose  float32 `json:"pre_close"`  // 昨日收盘价
	UpLimit   float32 `json:"up_limit"`   // 涨停价
	DownLimit float32 `json:"down_limit"` // 跌停价
}

// FieldsStkLimit StkLimit fields
var FieldsStkLimit = []string{"trade_date", "ts_code", "pre_close", "up_limit", "down_limit"}

type StkLimitRequest struct {
	Limit     string `json:"limit"`
	Offset    string `json:"offset"`
	TsCode    string `json:"ts_code"`    // 股票代码
	TradeDate string `json:"trade_date"` // 交易日期(YYYYMMDD，下同)
	StartDate string `json:"start_date"` // 开始日期
	EndDate   string `json:"end_date"`   // 结束日期
}

type StkLimitResponse struct {
	List []*StkLimit `json:"list"`
}

func (x *StkLimitResponse) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}

// 每日停复牌信息
type Suspendd struct {
	TsCode        string `json:"ts_code"`        // TS代码
	TradeDate     string `json:"trade_date"`     // 停复牌日期
	SuspendTiming string `json:"suspend_timing"` // 日内停牌时间段
	SuspendType   string `json:"suspend_type"`   // 停复牌类型：S-停牌，R-复牌
}

// FieldsSuspendd Suspendd fields
var FieldsSuspendd = []string{"ts_code", "trade_date", "suspend_timing", "suspend_type"}

type SuspenddRequest struct {
	Limit       string `json:"limit"`
	Offset      string `json:"offset"`
	TsCode      string `json:"ts_code"`      // 股票代码(可输入多值)
	TradeDate   string `json:"trade_date"`   // 交易日日期
	StartDate   string `json:"start_date"`   // 停复牌查询开始日期
	EndDate     string `json:"end_date"`     // 停复牌查询结束日期
	SuspendType string `json:"suspend_type"` // 停复牌类型：S-停牌,R-复牌
}

type SuspenddResponse struct {
	List []*Suspendd `json:"list"`
}

func (x *SuspenddResponse) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}

// 沪深港通资金流向
type MoneyFlowHsgt struct {
	TradeDate  string  `json:"trade_date"`  // 交易日期
	GgtSs      float32 `json:"ggt_ss"`      // 港股通（上海）
	GgtSz      float32 `json:"ggt_sz"`      // 港股通（深圳）
	Hgt        float32 `json:"hgt"`         // 沪股通（百万元）
	Sgt        float32 `json:"sgt"`         // 深股通（百万元）
	NorthMoney float32 `json:"north_money"` // 北向资金（百万元）
	SouthMoney float32 `json:"south_money"` // 南向资金（百万元）
}

// FieldsMoneyFlowHsgt MoneyFlowHsgt fields
var FieldsMoneyFlowHsgt = []string{"trade_date", "ggt_ss", "ggt_sz", "hgt", "sgt", "north_money", "south_money"}

type MoneyFlowHsgtRequest struct {
	Limit     string `json:"limit"`
	Offset    string `json:"offset"`
	TradeDate string `json:"trade_date"` // 交易日期 (二选一)
	StartDate string `json:"start_date"` // 开始日期 (二选一)
	EndDate   string `json:"end_date"`   // 结束日期
}

type MoneyFlowHsgtResponse struct {
	List []*MoneyFlowHsgt `json:"list"`
}

func (x *MoneyFlowHsgtResponse) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}

// 沪深股通十大成交股
type HsgtTop10 struct {
	TradeDate  string  `json:"trade_date"`  //交易日期
	TsCode     string  `json:"ts_code"`     //股票代码
	Name       string  `json:"name"`        //股票名称
	Close      float32 `json:"close"`       //收盘价
	Change     float32 `json:"change"`      //涨跌额
	Rank       int64   `json:"rank"`        //资金排名
	MarketType int64   `json:"market_type"` //市场类型（1：沪市 3：深市）
	Amount     float32 `json:"amount"`      //成交金额（元）
	NetAmount  float32 `json:"net_amount"`  //净成交金额（元）
	Buy        float32 `json:"buy"`         //买入金额（元）
	Sell       float32 `json:"sell"`        //卖出金额（元）
}

// FieldsHsgtTop10 HsgtTop10 fields
var FieldsHsgtTop10 = []string{"trade_date", "ts_code", "name", "close", "change", "rank", "market_type", "amount", "net_amount", "buy", "sell"}

type HsgtTop10Request struct {
	Limit      string `json:"limit"`
	Offset     string `json:"offset"`
	TsCode     string `json:"ts_code"`     // 股票代码（二选一）
	TradeDate  string `json:"trade_date"`  // 交易日期（二选一）
	StartDate  string `json:"start_date"`  // 开始日期
	EndDate    string `json:"end_date"`    // 结束日期
	MarketType string `json:"market_type"` // 市场类型（1：沪市 3：深市）
}

type HsgtTop10Response struct {
	List []*HsgtTop10 `json:"list"`
}

func (x *HsgtTop10Response) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}

// 港股通十大成交股
type GgtTop10 struct {
	TradeDate   string  `json:"trade_date"`    // 交易日期
	TsCode      string  `json:"ts_code"`       // 股票代码
	Name        string  `json:"name"`          // 股票名称
	Close       float32 `json:"close"`         // 收盘价
	PChange     float32 `json:"p_change"`      // 涨跌幅
	Rank        int64   `json:"rank"`          // 资金排名
	MarketType  int64   `json:"market_type"`   // 市场类型 2：港股通（沪） 4：港股通（深）
	Amount      float32 `json:"amount"`        // 累计成交金额（元）
	NetAmount   float32 `json:"net_amount"`    // 净买入金额（元）
	ShAmount    float32 `json:"sh_amount"`     // 沪市成交金额（元）
	ShNetAmount float32 `json:"sh_net_amount"` // 沪市净买入金额（元）
	ShBuy       float32 `json:"sh_buy"`        // 沪市买入金额（元）
	ShSell      float32 `json:"sh_sell"`       // 沪市卖出金额
	SzAmount    float32 `json:"sz_amount"`     // 深市成交金额（元）
	SzNetAmount float32 `json:"sz_net_amount"` // 深市净买入金额（元）
	SzBuy       float32 `json:"sz_buy"`        // 深市买入金额（元）
	SzSell      float32 `json:"sz_sell"`       // 深市卖出金额（元）
}

// FieldsGgtTop10 GgtTop10 fields
var FieldsGgtTop10 = []string{"trade_date", "ts_code", "name", "close", "p_change", "rank", "market_type", "amount", "net_amount", "sh_amount", "sh_net_amount", "sh_buy", "sh_sell", "sz_amount", "sz_net_amount", "sz_buy", "sz_sell"}

type GgtTop10Request struct {
	Limit      string `json:"limit"`
	Offset     string `json:"offset"`
	TsCode     string `json:"ts_code"`     // 股票代码（二选一）
	TradeDate  string `json:"trade_date"`  // 交易日期（二选一）
	StartDate  string `json:"start_date"`  // 开始日期
	EndDate    string `json:"end_date"`    // 结束日期
	MarketType string `json:"market_type"` // 市场类型 2：港股通（沪） 4：港股通（深）
}

type GgtTop10Response struct {
	List []*GgtTop10 `json:"list"`
}

func (x *GgtTop10Response) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}

// 港股通每日成交统计
type GgtDaily struct {
	TradeDate  string  `json:"trade_date"`  // 交易日期
	BuyAmount  float32 `json:"buy_amount"`  // 买入成交金额（亿元）
	BuyVolume  float32 `json:"buy_volume"`  // 买入成交笔数（万笔）
	SellAmount float32 `json:"sell_amount"` // 卖出成交金额（亿元）
	SellVolume float32 `json:"sell_volume"` // 卖出成交笔数（万笔）
}

// FieldsGgtDaily GgtDaily fields
var FieldsGgtDaily = []string{"trade_date", "buy_amount", "buy_volume", "sell_amount", "sell_volume"}

type GgtDailyRequest struct {
	Limit     string `json:"limit"`
	Offset    string `json:"offset"`
	TradeDate string `json:"trade_date"` // 交易日期 （格式YYYYMMDD，下同。支持单日和多日输入）
	StartDate string `json:"start_date"` // 开始日期
	EndDate   string `json:"end_date"`   // 结束日期
}

type GgtDailyResponse struct {
	List []*GgtDaily `json:"list"`
}

func (x *GgtDailyResponse) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}

// 港股通每月成交统计
type GgtMonthly struct {
	Month        string  `json:"month"`          //	交易日期
	DayBuyAmt    float32 `json:"day_buy_amt"`    //	当月日均买入成交金额（亿元）
	DayBuyVol    float32 `json:"day_buy_vol"`    //	当月日均买入成交笔数（万笔）
	DaySellAmt   float32 `json:"day_sell_amt"`   //	当月日均卖出成交金额（亿元）
	DaySellVol   float32 `json:"day_sell_vol"`   //	当月日均卖出成交笔数（万笔）
	TotalBuyAmt  float32 `json:"total_buy_amt"`  //	总买入成交金额（亿元）
	TotalBuyVol  float32 `json:"total_buy_vol"`  //	总买入成交笔数（万笔）
	TotalSellAmt float32 `json:"total_sell_amt"` //	总卖出成交金额（亿元）
	TotalSellVol float32 `json:"total_sell_vol"` //	总卖出成交笔数（万笔）
}

// FieldsGgtMonthly GgtMonthly fields
var FieldsGgtMonthly = []string{"month", "day_buy_amt", "day_buy_vol", "day_sell_amt", "day_sell_vol", "total_buy_amt", "total_buy_vol", "total_sell_amt", "total_sell_vol"}

type GgtMonthlyRequest struct {
	Limit      string `json:"limit"`
	Offset     string `json:"offset"`
	Month      string `json:"month"`       // 月度（格式YYYYMM，下同，支持多个输入）
	StartMonth string `json:"start_month"` // 开始月度
	EndMonth   string `json:"end_month"`   // 结束月度
}

type GgtMonthlyResponse struct {
	List []*GgtMonthly `json:"list"`
}

func (x *GgtMonthlyResponse) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}

// 备用行情
type BakDaily struct {
	TsCode      string  `json:"ts_code"`      // 股票代码
	TradeDate   string  `json:"trade_date"`   // 交易日期
	Name        string  `json:"name"`         // 股票名称
	PctChange   float32 `json:"pct_change"`   // 涨跌幅
	Close       float32 `json:"close"`        // 收盘价
	Change      float32 `json:"change"`       // 涨跌额
	Open        float32 `json:"open"`         // 开盘价
	High        float32 `json:"high"`         // 最高价
	Low         float32 `json:"low"`          // 最低价
	PreClose    float32 `json:"pre_close"`    // 昨收价
	VolRatio    float32 `json:"vol_ratio"`    // 量比
	TurnOver    float32 `json:"turn_over"`    // 换手率
	Swing       float32 `json:"swing"`        // 振幅
	Vol         float32 `json:"vol"`          // 成交量
	Amount      float32 `json:"amount"`       // 成交额
	Selling     float32 `json:"selling"`      // 内盘（主动卖，手）
	Buying      float32 `json:"buying"`       // 外盘（主动买， 手）
	TotalShare  float32 `json:"total_share"`  // 总股本(亿)
	FloatShare  float32 `json:"float_share"`  // 流通股本(亿)
	Pe          float32 `json:"pe"`           // 市盈(动)
	Industry    string  `json:"industry"`     // 所属行业
	Area        string  `json:"area"`         // 所属地域
	FloatMv     float32 `json:"float_mv"`     // 流通市值
	TotalMv     float32 `json:"total_mv"`     // 总市值
	AvgPrice    float32 `json:"avg_price"`    // 平均价
	Strength    float32 `json:"strength"`     // 强弱度(%)
	Activity    float32 `json:"activity"`     // 活跃度(%)
	AvgTurnover float32 `json:"avg_turnover"` // 笔换手
	Attack      float32 `json:"attack"`       // 攻击波(%)
	Interval_3  float32 `json:"interval_3"`   // 近3月涨幅
	Interval_6  float32 `json:"interval_6"`   // 近6月涨幅
}

// FieldsBakDaily BakDaily fields
var FieldsBakDaily = []string{"ts_code", "trade_date", "name", "pct_change", "close", "change", "open", "high", "low", "pre_close", "vol_ratio", "turn_over", "swing", "vol", "amount", "selling", "buying", "total_share", "float_share", "pe", "industry", "area", "float_mv", "total_mv", "avg_price", "strength", "activity", "avg_turnover", "attack", "interval_3", "interval_6"}

type BakDailyRequest struct {
	Limit     string `json:"limit"`
	Offset    string `json:"offset"`
	TsCode    string `json:"ts_code"`    // 股票代码
	TradeDate string `json:"trade_date"` // 交易日期
	StartDate string `json:"start_date"` // 开始日期
	EndDate   string `json:"end_date"`   // 结束日期
}

type BakDailyResponse struct {
	List []*BakDaily `json:"list"`
}

func (x *BakDailyResponse) String() string {
	bytes, _ := json.Marshal(x)
	return string(bytes)
}
