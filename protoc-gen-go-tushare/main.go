package main

import (
	"fmt"
	"strings"

	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/reflect/protoreflect"
)

const (
	jsonPackage = protogen.GoImportPath("encoding/json")
)

func main() {
	protogen.Options{}.Run(func(gen *protogen.Plugin) error {
		for _, f := range gen.Files {
			if !f.Generate {
				continue
			}
			generateFile(gen, f)
		}
		return nil
	})
}

func generateFile(gen *protogen.Plugin, file *protogen.File) {
	filename := file.GeneratedFilenamePrefix + ".tushare.go"
	g := gen.NewGeneratedFile(filename, file.GoImportPath)
	g.P("// Code generated by protoc-gen-go-tushare. DO NOT EDIT.")
	g.P("// source: ", file.Desc.Path())
	g.P() // 换行
	// 输出 package packageName
	g.P("package ", file.GoPackageName)
	g.P() // 换行

	g.P("var _ = ", jsonPackage.Ident("Decoder{}"))

	for _, m := range file.Messages {
		fields := []string{}
		// 输出 message comment
		leadingComment := strings.TrimSuffix(m.Comments.Leading.String(), "\n")
		g.P(leadingComment)
		// 输出 type m.GoIdent struct {
		g.P("type ", m.GoIdent, " struct {")
		for _, field := range m.Fields {
			trailingComment := strings.TrimSuffix(field.Comments.Trailing.String(), "\n")
			kind := field.Desc.Kind().String()

			// float类型
			if field.Desc.Kind() == protoreflect.FloatKind {
				kind = kind + "32"
			}

			line := fmt.Sprintf("%s %s `json:\"%s\"` %s", field.GoName, kind, field.Desc.JSONName(), trailingComment)

			// message 类型
			if field.Desc.Kind() == protoreflect.MessageKind {
				line = fmt.Sprintf("%s []*%s `json:\"%s\"` %s", field.GoName, field.Desc.Message().Name(), field.Desc.JSONName(), trailingComment)
			}

			// fileds
			if !strings.Contains(m.GoIdent.GoName, "Request") && !strings.Contains(m.GoIdent.GoName, "Response") {
				fields = append(fields, "\""+field.Desc.JSONName()+"\"")
			}

			// 输出 行内容
			g.P(line)
		}
		// 输出 }
		g.P("}")

		// api name & fields
		if !strings.Contains(m.GoIdent.GoName, "Request") && !strings.Contains(m.GoIdent.GoName, "Response") {
			g.P(fmt.Sprintf("// Api%s %s api name", m.Desc.Name(), m.Desc.Name()))
			g.P(fmt.Sprintf("const Api%s = \"%s\"", m.Desc.Name(), strings.Split(leadingComment, "|")[1]))
			g.P("")
			g.P(fmt.Sprintf("// Fields%s %s fields", m.Desc.Name(), m.Desc.Name()))
			g.P(fmt.Sprintf("var Fields%s = []string{%s}", m.Desc.Name(), strings.Join(fields, ",")))
		}

		// .String()
		if strings.Contains(m.GoIdent.GoName, "Response") {
			g.P(fmt.Sprintf("func (x *%s) String() string {", m.GoIdent.GoName))
			g.P("bytes, _ := json.Marshal(x)")
			g.P("return string(bytes)")
			g.P("}")
		}
	}
	g.P() // 换行
}
